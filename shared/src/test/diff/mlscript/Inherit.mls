
class Parent: { name: string }
//│ Defined class Parent

class Child: Parent & { age: int }
//│ Defined class Child

def p = Parent{ name = "Bob" }
//│ p: Parent & {name: "Bob"}
//│  = [Function: p]

p: Parent
//│ res: Parent
//│    = Parent { name: 'Bob' }

:e
def c = Child(Parent { name = "Bob" })
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.17: 	def c = Child(Parent { name = "Bob" })
//│ ║        	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Parent & {name: ?name}` is not a 1-element tuple
//│ ║  l.17: 	def c = Child(Parent { name = "Bob" })
//│ ║        	              ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into argument with expected type `({age: ?age, name: ?name0},)`
//│ ║  l.17: 	def c = Child(Parent { name = "Bob" })
//│ ╙──      	             ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ c: Child & {age: nothing, name: "Bob"} | error
//│  = [Function: c]

def c = Child(Parent { name = "Bob" } with { age = 123 })
//│ c: Child & {age: 123, name: "Bob"}
//│  = [Function: c1]

c: Parent
//│ res: Parent
//│    = Child { name: 'Bob', age: 123 }

c.name
//│ res: "Bob"
//│    = 'Bob'

c: { name: 'a }
//│ res: {name: "Bob"}
//│    = Child { name: 'Bob', age: 123 }

c: { name: string }
//│ res: {name: string}
//│    = Child { name: 'Bob', age: 123 }


def f x = case x of {
  | Parent -> x.name
  }
//│ f: (Parent with {name: 'name}) -> 'name
//│  = [Function: f]

f c
//│ res: "Bob"
//│    = 'Bob'

f (c: Parent)
//│ res: string
//│    = 'Bob'


def f x = case x of {
  | Child -> x.name
  }
//│ f: (Child\age with {name: 'name}) -> 'name
//│  = [Function: f1]

f c
//│ res: "Bob"
//│    = 'Bob'

:e
f (c: Parent)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.77: 	f (c: Parent)
//│ ║        	^^^^^^^^^^^^^
//│ ╟── type `Parent` is not a 1-element tuple
//│ ║  l.77: 	f (c: Parent)
//│ ║        	      ^^^^^^
//│ ╟── but it flows into argument with expected type `(?a,)`
//│ ║  l.77: 	f (c: Parent)
//│ ║        	  ^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.66: 	def f x = case x of {
//│ ║        	               ^
//│ ╟── from class pattern:
//│ ║  l.67: 	  | Child -> x.name
//│ ╙──      	    ^^^^^
//│ res: error | string
//│    = 'Bob'


def f x = case x of {
  | Parent -> x.name
  | _ -> ""
  }
//│ f: ((Parent with {name: 'name}) | ~Parent) -> ("" | 'name)
//│  = [Function: f2]

f c
//│ res: "" | "Bob"
//│    = 'Bob'

f (c: Parent)
//│ res: string
//│    = 'Bob'


def f x = case x of {
  | Parent -> x.name
  | Child -> x.name
  }
//│ f: (Parent with {name: 'name}) -> 'name
//│  = [Function: f3]

f c
//│ res: "Bob"
//│    = 'Bob'

f (c: Parent)
//│ res: string
//│    = 'Bob'

