
class A: { x: int }
//│ Defined class A

def muta1: MutArray[int]
//│ muta1: MutArray[int]
//│      = <missing implementation>

muta1[2] <- 666
//│ /!!!\ Uncaught error: java.lang.Exception: Cannot update counter for uninitialized location
//│ 	at: mlscript.ConstraintSolver$ErrorSimplifier.$anonfun$updateCounter$1(ConstraintSolver.scala:864)
//│ 	at: scala.collection.mutable.HashMap.updateWith(HashMap.scala:154)
//│ 	at: mlscript.ConstraintSolver$ErrorSimplifier.updateCounter(ConstraintSolver.scala:857)
//│ 	at: mlscript.ConstraintSolver$ErrorSimplifier.$anonfun$updateChainCount$3(ConstraintSolver.scala:914)
//│ 	at: mlscript.ConstraintSolver$ErrorSimplifier.$anonfun$updateChainCount$3$adapted(ConstraintSolver.scala:914)
//│ 	at: scala.Option.foreach(Option.scala:437)
//│ 	at: mlscript.ConstraintSolver$ErrorSimplifier.$anonfun$updateChainCount$2(ConstraintSolver.scala:914)
//│ 	at: mlscript.ConstraintSolver$ErrorSimplifier.$anonfun$updateChainCount$2$adapted(ConstraintSolver.scala:914)
//│ 	at: scala.collection.immutable.List.foreach(List.scala:333)
//│ 	at: mlscript.ConstraintSolver$ErrorSimplifier.updateChainCount(ConstraintSolver.scala:914)

:e
muta1[1] <- false
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.23: 	muta1[1] <- false
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ╟── reference of type `false` does not match type `?a`
//│ ║  l.23: 	muta1[1] <- false
//│ ║        	            ^^^^^
//│ ╟── Note: constraint arises from assigned array element:
//│ ║  l.23: 	muta1[1] <- false
//│ ║        	^^^^^^^^
//│ ╟── from type reference:
//│ ║  l.5: 	def muta1: MutArray[int]
//│ ╙──     	                    ^^^
//│ = <no result>
//│   muta1 is not implemented

def a1: Array[int]
//│ a1: Array[int]
//│   = <missing implementation>

muta1 : Array[int]
//│ res: Array[int]
//│    = <no result>
//│      muta1 is not implemented

:e
a1: MutArray[int]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.49: 	a1: MutArray[int]
//│ ║        	^^
//│ ╟── type `Array[int]` is not an instance of `MutArray[int]`
//│ ║  l.39: 	def a1: Array[int]
//│ ║        	        ^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `MutArray[int]`
//│ ║  l.49: 	a1: MutArray[int]
//│ ║        	^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.49: 	a1: MutArray[int]
//│ ╙──      	    ^^^^^^^^^^^^^
//│ res: MutArray[int]
//│    = <no result>
//│      a1 is not implemented

a2 = A {x=3}
//│ a2: A & {x: 3}
//│   = A { x: 3 }

def rc1 : { mut x : int}
rc1 = {mut x = 1}
//│ rc1: {mut x: int}
//│    = <missing implementation>
//│ {mut x: 'x}
//│   where
//│     'x :> 1
//│   <:  rc1:
//│ {mut x: int}
//│    = { x: 1 }

rc1.x <- 3
//│ = []

:e
rc1.x <- true
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.85: 	rc1.x <- true
//│ ║        	^^^^^^^^^^^^^
//│ ╟── reference of type `true` does not match type `?x`
//│ ║  l.85: 	rc1.x <- true
//│ ║        	         ^^^^
//│ ╟── Note: constraint arises from assigned selection:
//│ ║  l.85: 	rc1.x <- true
//│ ║        	^^^^^
//│ ╟── from type reference:
//│ ║  l.70: 	def rc1 : { mut x : int}
//│ ╙──      	                    ^^^
//│ = []


immrcd = { x = 1: int }
immtpl = (1: int,)
//│ immrcd: {x: int}
//│       = { x: 1 }
//│ immtpl: (int,)
//│       = [ 1 ]

immrcd.x
immtpl._1
immtpl[0]
//│ res: int
//│    = 1
//│ res: int
//│    = undefined
//│ res: int | undefined
//│    = 1

:e
immrcd.x <- 0
immtpl._1 <- 0
immtpl[0] <- 0
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.119: 	immrcd.x <- 0
//│ ║         	^^^^^^^^^^^^^
//│ ╟── record field of type `int` is not mutable
//│ ║  l.101: 	immrcd = { x = 1: int }
//│ ║         	           ^^^^^
//│ ╟── but it flows into assigned field with expected type `?x`
//│ ║  l.119: 	immrcd.x <- 0
//│ ╙──       	       ^
//│ = []
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.120: 	immtpl._1 <- 0
//│ ║         	^^^^^^^^^^^^^^
//│ ╟── tuple field of type `int` is not mutable
//│ ║  l.102: 	immtpl = (1: int,)
//│ ║         	          ^
//│ ╟── but it flows into assigned field with expected type `?a`
//│ ║  l.120: 	immtpl._1 <- 0
//│ ╙──       	       ^^
//│ = []
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.121: 	immtpl[0] <- 0
//│ ║         	^^^^^^^^^^^^^^
//│ ╟── tuple field of type `int` is not mutable
//│ ║  l.102: 	immtpl = (1: int,)
//│ ║         	          ^
//│ ╟── but it flows into assigned array element with expected type `?a`
//│ ║  l.121: 	immtpl[0] <- 0
//│ ╙──       	^^^^^^^^^
//│ = []


rc2 = {mut x = 1}
rc2.x <- true
rc2.x <- "hello"
//│ rc2: {mut x: 'x}
//│   where
//│     'x :> 1
//│    = { x: 1 }
//│ = []
//│ = []

// TODO let-bound values should be treated as monomorphic – see mismatch in:
rc2
//│ res: {mut x: 'x}
//│   where
//│     'x :> 1
//│    = { x: 'hello' }

def g r = (fun x -> r) (r.x <- 3)
g rc1
g rc2
//│ g: ({mut x: in 3} & 'a) -> 'a
//│  = [Function: g]
//│ res: {mut x: int}
//│    = { x: 3 }
//│ res: {mut x: 'x}
//│   where
//│     'x :> 1 | 3
//│    = { x: 3 }

:e 
g {x = 3}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.184: 	g {x = 3}
//│ ║         	^^^^^^^^^
//│ ╟── record field of type `3` is not mutable
//│ ║  l.184: 	g {x = 3}
//│ ╙──       	   ^^^^^
//│ res: error | {x: 3}
//│    = { x: 3 }

def ga r = (fun x -> r) (r[1] <- 6)
ga muta1
//│ ga: (MutArray['a] & 'b) -> 'b
//│   where
//│     'a :> 6
//│   = [Function: ga]
//│ /!!!\ Uncaught error: java.lang.Exception: Cannot update counter for uninitialized location
//│ 	at: mlscript.ConstraintSolver$ErrorSimplifier.$anonfun$updateCounter$1(ConstraintSolver.scala:864)
//│ 	at: scala.collection.mutable.HashMap.updateWith(HashMap.scala:154)
//│ 	at: mlscript.ConstraintSolver$ErrorSimplifier.updateCounter(ConstraintSolver.scala:857)
//│ 	at: mlscript.ConstraintSolver$ErrorSimplifier.$anonfun$updateChainCount$3(ConstraintSolver.scala:914)
//│ 	at: mlscript.ConstraintSolver$ErrorSimplifier.$anonfun$updateChainCount$3$adapted(ConstraintSolver.scala:914)
//│ 	at: scala.Option.foreach(Option.scala:437)
//│ 	at: mlscript.ConstraintSolver$ErrorSimplifier.$anonfun$updateChainCount$2(ConstraintSolver.scala:914)
//│ 	at: mlscript.ConstraintSolver$ErrorSimplifier.$anonfun$updateChainCount$2$adapted(ConstraintSolver.scala:914)
//│ 	at: scala.collection.immutable.List.foreach(List.scala:333)
//│ 	at: mlscript.ConstraintSolver$ErrorSimplifier.updateChainCount(ConstraintSolver.scala:914)

:e
ga a1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.213: 	ga a1
//│ ║         	^^^^^
//│ ╟── type `Array[int]` is not a 1-element tuple
//│ ║  l.39: 	def a1: Array[int]
//│ ║        	        ^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `(?a,)`
//│ ║  l.213: 	ga a1
//│ ║         	   ^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.194: 	def ga r = (fun x -> r) (r[1] <- 6)
//│ ║         	                         ^
//│ ╟── from assignment:
//│ ║  l.194: 	def ga r = (fun x -> r) (r[1] <- 6)
//│ ╙──       	                         ^^^^^^^^^
//│ res: Array[int] | error
//│    = <no result>
//│      a1 is not implemented

trait T
//│ Defined trait T

def t1 : T & {mut x : int; y : bool}
t1 = T {mut x = 2; y = false}
t2 = T {x = 2}
//│ t1: T & {mut x: int, y: bool}
//│   = <missing implementation>
//│ {mut x: 'x, y: false} & #T
//│   where
//│     'x :> 2
//│   <:  t1:
//│ T & {mut x: int, y: bool}
//│   = { x: 2, y: false }
//│ t2: {x: 2} & #T
//│   = { x: 2 }

t1.x <- 4
//│ = []

:e
t1.y <- true
t2.x <- 3
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.254: 	t1.y <- true
//│ ║         	^^^^^^^^^^^^
//│ ╟── record field of type `bool` is not mutable
//│ ║  l.236: 	def t1 : T & {mut x : int; y : bool}
//│ ║         	                           ^^^^^^^^
//│ ╟── but it flows into assigned field with expected type `?y`
//│ ║  l.254: 	t1.y <- true
//│ ╙──       	   ^
//│ = []
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.255: 	t2.x <- 3
//│ ║         	^^^^^^^^^
//│ ╟── record field of type `2` is not mutable
//│ ║  l.238: 	t2 = T {x = 2}
//│ ║         	        ^^^^^
//│ ╟── but it flows into assigned field with expected type `?x`
//│ ║  l.255: 	t2.x <- 3
//│ ╙──       	   ^
//│ = []

class B: { mut x: int; y: bool }
  method Foo = this.x
//│ Defined class B
//│ Defined B.Foo: B -> int

def b1 : B
b1 = B { mut x = 2; y = true }
b2 = B { mut x = 1; y = false}
//│ b1: B
//│   = <missing implementation>
//│ B with {mut x: 'x, y: true}
//│   where
//│     'x :> 2
//│        <: int
//│   <:  b1:
//│ B
//│   = B { x: 2, y: true }
//│ b2: B with {mut x: 'x, y: false}
//│   where
//│     'x :> 1
//│        <: int
//│   = B { x: 1, y: false }

b1.Foo
//│ res: int
//│    = 2

:e
b1.Foo <- 0
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.305: 	b1.Foo <- 0
//│ ║         	^^^^^^^^^^^
//│ ╟── type `B` does not have field 'Foo'
//│ ║  l.282: 	def b1 : B
//│ ║         	         ^
//│ ╟── but it flows into reference with expected type `{Foo :> ?Foo}`
//│ ║  l.305: 	b1.Foo <- 0
//│ ║         	^^
//│ ╟── Note: constraint arises from assigned selection:
//│ ║  l.305: 	b1.Foo <- 0
//│ ╙──       	^^^^^^
//│ = []

:e
b3 = B {x = 6; y = false}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.321: 	b3 = B {x = 6; y = false}
//│ ║         	     ^^^^^^^^^^^^^^^^^^^^
//│ ╟── record field of type `6` is not mutable
//│ ║  l.321: 	b3 = B {x = 6; y = false}
//│ ╙──       	        ^^^^^
//│ b3: (B with {mut x: 'x, y: false}) | error
//│   where
//│     'x :> 6
//│        <: int
//│   = B { x: 6, y: false }

:e
b2.y <- b1.y
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.335: 	b2.y <- b1.y
//│ ║         	^^^^^^^^^^^^
//│ ╟── record field of type `?y` is not mutable
//│ ║  l.277: 	class B: { mut x: int; y: bool }
//│ ║         	                       ^^^^^^^
//│ ╟── but it flows into assigned field with expected type `?y0`
//│ ║  l.335: 	b2.y <- b1.y
//│ ╙──       	   ^
//│ = []

:e
b2.x <- b1.y
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.348: 	b2.x <- b1.y
//│ ║         	^^^^^^^^^^^^
//│ ╟── type `bool` does not match type `?x`
//│ ║  l.277: 	class B: { mut x: int; y: bool }
//│ ║         	                          ^^^^
//│ ╟── but it flows into reference with expected type `?x0`
//│ ║  l.348: 	b2.x <- b1.y
//│ ║         	        ^^
//│ ╟── Note: constraint arises from assigned selection:
//│ ║  l.348: 	b2.x <- b1.y
//│ ║         	^^^^
//│ ╟── from type reference:
//│ ║  l.277: 	class B: { mut x: int; y: bool }
//│ ╙──       	                  ^^^
//│ = []

b2.x <- b1.x
b1.x <- a2.x
//│ = []
//│ = []

def h : B -> int -> int
def h b i = (fun _ -> b.x) (b.x <- i) 
//│ h: B -> int -> int
//│  = <missing implementation>
//│ {mut x: in 'x out 'a} -> 'x -> 'a
//│   <:  h:
//│ B -> int -> int
//│  = [Function: h]

h b1 2
//│ res: int
//│    = 2

:e
h {mut x = 4} 2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.385: 	h {mut x = 4} 2
//│ ║         	^^^^^^^^^^^^^
//│ ╟── record literal of type `{mut x: ?x}` is not a 1-element tuple
//│ ║  l.385: 	h {mut x = 4} 2
//│ ║         	  ^^^^^^^^^^^
//│ ╟── Note: constraint arises from tuple type:
//│ ║  l.371: 	def h : B -> int -> int
//│ ╙──       	        ^
//│ res: error | int
//│    = 2

def mt1: (mut int, mut bool)
def mt2: (int, int)
def mt3: (mut int, mut int)
def mt4: (mut bool, bool, bool)
mt4 = (mut true, false, false)
//│ mt1: (mut int, mut bool,)
//│    = <missing implementation>
//│ mt2: (int, int,)
//│    = <missing implementation>
//│ mt3: (mut int, mut int,)
//│    = <missing implementation>
//│ mt4: (mut bool, bool, bool,)
//│    = <missing implementation>
//│ (mut 'a, false, false,)
//│   where
//│     'a :> true
//│   <:  mt4:
//│ (mut bool, bool, bool,)
//│    = [ true, false, false ]

mt1 : (int, bool)
//│ res: (int, bool,)
//│    = <no result>
//│      mt1 is not implemented

def emt: (mut int)
emt._1
//│ emt: (mut int,)
//│    = <missing implementation>
//│ res: int
//│    = <no result>
//│      emt is not implemented

k1 = (mut 233, "hello", mut true)
k1._1 <- k1._1 + 1
//│ k1: (mut 'a, "hello", mut 'b,)
//│   where
//│     'b :> true
//│     'a :> 233
//│   = [ 233, 'hello', true ]
//│ = []

:e
k1._2 <- 233
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.441: 	k1._2 <- 233
//│ ║         	^^^^^^^^^^^^
//│ ╟── tuple field of type `"hello"` is not mutable
//│ ║  l.431: 	k1 = (mut 233, "hello", mut true)
//│ ║         	               ^^^^^^^
//│ ╟── but it flows into assigned field with expected type `?a`
//│ ║  l.441: 	k1._2 <- 233
//│ ╙──       	   ^^
//│ = []

mt1 = (mut 3, mut false)
//│ (mut 'a, mut 'b,)
//│   where
//│     'b :> false
//│     'a :> 3
//│   <:  mt1:
//│ (mut int, mut bool,)
//│    = [ 3, false ]

def amf : MutArray['a] -> 'a
//│ amf: MutArray['a] -> 'a
//│    = <missing implementation>

amf mt3
//│ res: int
//│    = <no result>
//│      amf is not implemented

:e
amf mt4
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.472: 	amf mt4
//│ ║         	^^^^^^^
//│ ╟── type `(mut bool, bool, bool,)` does not match type `(MutArray[?a],)`
//│ ║  l.401: 	def mt4: (mut bool, bool, bool)
//│ ║         	         ^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `(MutArray[?a],)`
//│ ║  l.472: 	amf mt4
//│ ║         	    ^^^
//│ ╟── Note: constraint arises from tuple type:
//│ ║  l.462: 	def amf : MutArray['a] -> 'a
//│ ╙──       	          ^^^^^^^^^^^^
//│ res: bool | error
//│    = <no result>
//│      amf is not implemented

:e
a1[0] <- 1
mt1[0] <- mt2._1
mt4[3] <- true
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.490: 	a1[0] <- 1
//│ ║         	^^^^^^^^^^
//│ ╟── type `Array[int]` does not match type `MutArray[?a]`
//│ ║  l.39: 	def a1: Array[int]
//│ ║        	        ^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `MutArray[?a]`
//│ ║  l.490: 	a1[0] <- 1
//│ ╙──       	^^
//│ = <no result>
//│   a1 is not implemented
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.491: 	mt1[0] <- mt2._1
//│ ║         	^^^^^^^^^^^^^^^^
//│ ╟── type `int` does not match type `?a`
//│ ║  l.398: 	def mt1: (mut int, mut bool)
//│ ║         	              ^^^
//│ ╟── Note: constraint arises from assigned array element:
//│ ║  l.491: 	mt1[0] <- mt2._1
//│ ║         	^^^^^^
//│ ╟── from type reference:
//│ ║  l.398: 	def mt1: (mut int, mut bool)
//│ ╙──       	                       ^^^^
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.491: 	mt1[0] <- mt2._1
//│ ║         	^^^^^^^^^^^^^^^^
//│ ╟── type `int` does not match type `?a`
//│ ║  l.399: 	def mt2: (int, int)
//│ ║         	          ^^^
//│ ╟── but it flows into field selection with expected type `?b`
//│ ║  l.491: 	mt1[0] <- mt2._1
//│ ║         	          ^^^^^^
//│ ╟── Note: constraint arises from assigned array element:
//│ ║  l.491: 	mt1[0] <- mt2._1
//│ ║         	^^^^^^
//│ ╟── from type reference:
//│ ║  l.398: 	def mt1: (mut int, mut bool)
//│ ╙──       	                       ^^^^
//│ = <no result>
//│   mt2 is not implemented
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.492: 	mt4[3] <- true
//│ ║         	^^^^^^^^^^^^^^
//│ ╟── type `(mut bool, bool, bool,)` does not match type `MutArray[?a]`
//│ ║  l.401: 	def mt4: (mut bool, bool, bool)
//│ ║         	         ^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `MutArray[?a]`
//│ ║  l.492: 	mt4[3] <- true
//│ ╙──       	^^^
//│ = []

mt1._1 <- mt2._1
mt1._1 <- mt1._1 * 2
mt1._2 <- false
mt3[0] <- let tmp = mt3[1] in case tmp of { undefined -> 0 | _ -> tmp }
mt3[1] <- mt1._1
//│ = <no result>
//│   mt2 is not implemented
//│ = []
//│ = []
//│ /!!!\ Uncaught error: java.lang.Exception: Cannot update counter for uninitialized location
//│ 	at: mlscript.ConstraintSolver$ErrorSimplifier.$anonfun$updateCounter$1(ConstraintSolver.scala:864)
//│ 	at: scala.collection.mutable.HashMap.updateWith(HashMap.scala:154)
//│ 	at: mlscript.ConstraintSolver$ErrorSimplifier.updateCounter(ConstraintSolver.scala:857)
//│ 	at: mlscript.ConstraintSolver$ErrorSimplifier.$anonfun$updateChainCount$3(ConstraintSolver.scala:914)
//│ 	at: mlscript.ConstraintSolver$ErrorSimplifier.$anonfun$updateChainCount$3$adapted(ConstraintSolver.scala:914)
//│ 	at: scala.Option.foreach(Option.scala:437)
//│ 	at: mlscript.ConstraintSolver$ErrorSimplifier.$anonfun$updateChainCount$2(ConstraintSolver.scala:914)
//│ 	at: mlscript.ConstraintSolver$ErrorSimplifier.$anonfun$updateChainCount$2$adapted(ConstraintSolver.scala:914)
//│ 	at: scala.collection.immutable.List.foreach(List.scala:333)
//│ 	at: mlscript.ConstraintSolver$ErrorSimplifier.updateChainCount(ConstraintSolver.scala:914)

:e
:ge
mt1._1 <- mt1._2
mt1._2 <- 1
mt1._1 <- (b1.t <- 4)
(mt1._1 <- b1.t) <- 4
b1.x <- 1 + 2 <- 4
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.567: 	mt1._1 <- mt1._2
//│ ║         	^^^^^^^^^^^^^^^^
//│ ╟── type `bool` does not match type `?a`
//│ ║  l.398: 	def mt1: (mut int, mut bool)
//│ ║         	                       ^^^^
//│ ╟── but it flows into field selection with expected type `?b`
//│ ║  l.567: 	mt1._1 <- mt1._2
//│ ║         	          ^^^^^^
//│ ╟── Note: constraint arises from assigned selection:
//│ ║  l.567: 	mt1._1 <- mt1._2
//│ ║         	^^^^^^
//│ ╟── from type reference:
//│ ║  l.398: 	def mt1: (mut int, mut bool)
//│ ╙──       	              ^^^
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.568: 	mt1._2 <- 1
//│ ║         	^^^^^^^^^^^
//│ ╟── integer literal of type `1` does not match type `?a`
//│ ║  l.568: 	mt1._2 <- 1
//│ ║         	          ^
//│ ╟── Note: constraint arises from assigned selection:
//│ ║  l.568: 	mt1._2 <- 1
//│ ║         	^^^^^^
//│ ╟── from type reference:
//│ ║  l.398: 	def mt1: (mut int, mut bool)
//│ ╙──       	                       ^^^^
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.569: 	mt1._1 <- (b1.t <- 4)
//│ ║         	           ^^^^^^^^^
//│ ╟── type `B` does not have field 't'
//│ ║  l.282: 	def b1 : B
//│ ║         	         ^
//│ ╟── but it flows into reference with expected type `{mut t: in ?t}`
//│ ║  l.569: 	mt1._1 <- (b1.t <- 4)
//│ ║         	           ^^
//│ ╟── Note: constraint arises from assigned selection:
//│ ║  l.569: 	mt1._1 <- (b1.t <- 4)
//│ ╙──       	           ^^^^
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.569: 	mt1._1 <- (b1.t <- 4)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ╟── assignment of type `unit` does not match type `?a`
//│ ║  l.569: 	mt1._1 <- (b1.t <- 4)
//│ ║         	           ^^^^^^^^^
//│ ╟── Note: constraint arises from assigned selection:
//│ ║  l.569: 	mt1._1 <- (b1.t <- 4)
//│ ║         	^^^^^^
//│ ╟── from type reference:
//│ ║  l.398: 	def mt1: (mut int, mut bool)
//│ ╙──       	              ^^^
//│ ╔══[ERROR] Illegal assignment
//│ ║  l.570: 	(mt1._1 <- b1.t) <- 4
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ╟── cannot assign to assignment
//│ ║  l.570: 	(mt1._1 <- b1.t) <- 4
//│ ╙──       	^^^^^^^^^^^^^^^^
//│ res: error
//│ ╔══[ERROR] Illegal assignment
//│ ║  l.571: 	b1.x <- 1 + 2 <- 4
//│ ║         	            ^^^^^^
//│ ╟── cannot assign to integer literal
//│ ║  l.571: 	b1.x <- 1 + 2 <- 4
//│ ╙──       	            ^
//│ Code generation encountered an error:
//│   illegal assignemnt left-hand side: Bra(rcd = false, Assign(Sel(Var(mt1), _1), Sel(Var(b1), t)))

def f : {mut _1 : int} -> int -> unit
def g : (mut int, bool) -> int -> unit
//│ f: {mut _1: int} -> int -> unit
//│  = <missing implementation>
//│ g: (mut int, bool,) -> int -> unit
//│  = <missing implementation>

def f a n = a._1 <- n
//│ {mut _1: in 'a} -> 'a -> unit
//│   <:  f:
//│ {mut _1: int} -> int -> unit
//│  = [Function: f]

f mt1 1
//│ = []

:e
f mt2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.656: 	f mt2
//│ ║         	^^^^^
//│ ╟── tuple field of type `int` is not mutable
//│ ║  l.399: 	def mt2: (int, int)
//│ ╙──       	          ^^^
//│ res: int -> unit | error
//│    = <no result>
//│      mt2 is not implemented

:e
g (1, true) 2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.668: 	g (1, true) 2
//│ ║         	^^^^^^^^^^^
//│ ╟── tuple field of type `1` is not mutable
//│ ║  l.668: 	g (1, true) 2
//│ ╙──       	   ^
//│ res: error | unit
//│    = <no result>
//│      g is not implemented

w1 = 3 with {mut x = 4}
w1.x <- 3
//│ w1: 3 & {mut x: 'x}
//│   where
//│     'x :> 4
//│   = [Number: 3] { x: 4 }
//│ = []

w1.x
//│ res: 4
//│    = 3

def st1 : (int, )
def st2 : (mut int, )
//│ st1: (int,)
//│    = <missing implementation>
//│ st2: (mut int,)
//│    = <missing implementation>

st1 = (3,)
st2 = (mut 4,)
//│ (3,)
//│   <:  st1:
//│ (int,)
//│    = [ 3 ]
//│ (mut 'a,)
//│   where
//│     'a :> 4
//│   <:  st2:
//│ (mut int,)
//│    = [ 4 ]

st2._1 <- 8
//│ = []

:e
st1._1 <- 9
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.715: 	st1._1 <- 9
//│ ║         	^^^^^^^^^^^
//│ ╟── tuple field of type `int` is not mutable
//│ ║  l.691: 	def st1 : (int, )
//│ ║         	           ^^^
//│ ╟── but it flows into assigned field with expected type `?a`
//│ ║  l.715: 	st1._1 <- 9
//│ ╙──       	    ^^
//│ = []

def am1 : Array[(mut int)]
//│ am1: Array[(mut int,)]
//│    = <missing implementation>

def foreach : Array['a] -> ('a -> unit) -> Array['a]
//│ foreach: Array['a] -> ('a -> unit) -> Array['a]
//│        = <missing implementation>

foreach am1 (fun x -> x[0] <- 1)
foreach am1 (fun y -> y._1 <- 2)
//│ /!!!\ Uncaught error: java.lang.Exception: Cannot update counter for uninitialized location
//│ 	at: mlscript.ConstraintSolver$ErrorSimplifier.$anonfun$updateCounter$1(ConstraintSolver.scala:864)
//│ 	at: scala.collection.mutable.HashMap.updateWith(HashMap.scala:154)
//│ 	at: mlscript.ConstraintSolver$ErrorSimplifier.updateCounter(ConstraintSolver.scala:857)
//│ 	at: mlscript.ConstraintSolver$ErrorSimplifier.$anonfun$updateChainCount$3(ConstraintSolver.scala:914)
//│ 	at: mlscript.ConstraintSolver$ErrorSimplifier.$anonfun$updateChainCount$3$adapted(ConstraintSolver.scala:914)
//│ 	at: scala.Option.foreach(Option.scala:437)
//│ 	at: mlscript.ConstraintSolver$ErrorSimplifier.$anonfun$updateChainCount$2(ConstraintSolver.scala:914)
//│ 	at: mlscript.ConstraintSolver$ErrorSimplifier.$anonfun$updateChainCount$2$adapted(ConstraintSolver.scala:914)
//│ 	at: scala.collection.immutable.List.foreach(List.scala:333)
//│ 	at: mlscript.ConstraintSolver$ErrorSimplifier.updateChainCount(ConstraintSolver.scala:914)

:e
(1,2,3)[0] <- true
(1,2,3)._1 <- "hello"
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.750: 	(1,2,3)[0] <- true
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── tuple literal of type `(1, 2, 3,)` does not match type `MutArray[?a]`
//│ ║  l.750: 	(1,2,3)[0] <- true
//│ ╙──       	^^^^^^^
//│ = []
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.751: 	(1,2,3)._1 <- "hello"
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ╟── tuple field of type `1` is not mutable
//│ ║  l.751: 	(1,2,3)._1 <- "hello"
//│ ║         	 ^
//│ ╟── but it flows into assigned field with expected type `?a`
//│ ║  l.751: 	(1,2,3)._1 <- "hello"
//│ ╙──       	        ^^
//│ = []

:e
(0,)["oops"]
(mut 0,)["oops"] <- 1
//│ ╔══[ERROR] Type mismatch in array access:
//│ ║  l.771: 	(0,)["oops"]
//│ ║         	^^^^^^^^^^^^
//│ ╟── string literal of type `"oops"` is not an instance of type `int`
//│ ║  l.771: 	(0,)["oops"]
//│ ╙──       	     ^^^^^^
//│ res: 0 | undefined
//│    = undefined
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.772: 	(mut 0,)["oops"] <- 1
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ╟── string literal of type `"oops"` is not an instance of type `int`
//│ ║  l.772: 	(mut 0,)["oops"] <- 1
//│ ╙──       	         ^^^^^^
//│ = []

oops = "oops"
arr = (mut 0,)
//│ oops: "oops"
//│     = 'oops'
//│ arr: (mut 'a,)
//│   where
//│     'a :> 0
//│    = [ 0 ]

:e
arr[oops]
arr[oops] <- 1
//│ ╔══[ERROR] Type mismatch in array access:
//│ ║  l.799: 	arr[oops]
//│ ║         	^^^^^^^^^
//│ ╟── string literal of type `"oops"` is not an instance of type `int`
//│ ║  l.789: 	oops = "oops"
//│ ║         	       ^^^^^^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.799: 	arr[oops]
//│ ╙──       	    ^^^^
//│ res: 0 | undefined
//│    = undefined
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.800: 	arr[oops] <- 1
//│ ║         	^^^^^^^^^^^^^^
//│ ╟── string literal of type `"oops"` is not an instance of type `int`
//│ ║  l.789: 	oops = "oops"
//│ ║         	       ^^^^^^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.800: 	arr[oops] <- 1
//│ ╙──       	    ^^^^
//│ = []


// TODO support typing of mutable local variable

x = 1
//│ x: 1
//│  = 1

:e
x <- 2
//│ ╔══[ERROR] Illegal assignment
//│ ║  l.831: 	x <- 2
//│ ║         	^^^^^^
//│ ╟── cannot assign to reference
//│ ║  l.831: 	x <- 2
//│ ╙──       	^
//│ res: error
//│    = []

x
//│ res: 1
//│    = 2



fun x -> (x.a <- 0, x.a + 1)
//│ res: {mut a: in 0 out int} -> (unit, int,)
//│    = [Function: res]

def foo x y = (x.a <- 0, x.a + 1, x.a, x.a <- y)
//│ foo: {mut a: in 0 | 'a out int & 'a0} -> 'a -> (unit, int, 'a0, unit,)
//│    = [Function: foo]

def foo x y z = (x.a <- 0, x.a + 1, x.a, x.a <- y, z x.a)
//│ foo: {mut a: in 0 | 'a out int & 'a0} -> 'a -> ('a0 -> 'b) -> (unit, int, 'a0, unit, 'b,)
//│    = [Function: foo1]

foo { mut a = 1 } 2 add
//│ res: (unit, int, 0 | 1 | 2, unit, int -> int,)
//│    = [ [], 1, 0, [], [Function (anonymous)] ]

:e
foo { mut a = 1 } 2 3
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.864: 	foo { mut a = 1 } 2 3
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ╟── integer literal of type `3` is not a 1-element tuple
//│ ║  l.864: 	foo { mut a = 1 } 2 3
//│ ║         	                    ^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.855: 	def foo x y z = (x.a <- 0, x.a + 1, x.a, x.a <- y, z x.a)
//│ ╙──       	                                                   ^
//│ res: (unit, int, 0 | 1 | 2, unit, nothing,) | error
//│ Runtime error:
//│   TypeError: z is not a function

:e
foo { mut a = "oops" } 2
foo { a = 1 } 2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.879: 	foo { mut a = "oops" } 2
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── string literal of type `"oops"` does not match type `?a`
//│ ║  l.879: 	foo { mut a = "oops" } 2
//│ ║         	              ^^^^^^
//│ ╟── but it flows into mutable record field with expected type `?a0`
//│ ║  l.879: 	foo { mut a = "oops" } 2
//│ ║         	          ^^^^^^^^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.855: 	def foo x y z = (x.a <- 0, x.a + 1, x.a, x.a <- y, z x.a)
//│ ╙──       	                           ^^^
//│ res: (("oops" | 0 | 2) -> 'a) -> (unit, int, "oops" | 0 | 2, unit, 'a,) | error
//│    = [Function (anonymous)]
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.880: 	foo { a = 1 } 2
//│ ║         	^^^^^^^^^^^^^
//│ ╟── record field of type `1` is not mutable
//│ ║  l.880: 	foo { a = 1 } 2
//│ ╙──       	      ^^^^^
//│ res: (1 -> 'a) -> (unit, int, 1, unit, 'a,) | error
//│    = [Function (anonymous)]


