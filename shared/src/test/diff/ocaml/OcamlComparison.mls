////////// file 1935

////////// ocamlc error
//
// File "1935.ml", line 22, characters 18-44:
// 22 |     let (_,res) = List.fold_left f base args in res in
//                        ^^^^^^^^^^^^^^^^^^^^^^^^^^
// Error: This expression has type int but an expression was expected of type
//          'a * 'b

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;
let addTuple (l1,l2) = l1 + l2;;
let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
  else
    if (List.length l1) < (List.length l2)
    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2)
    else (l1, l2);;
let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;
//│ ╔══[ERROR] Type `?a * ?a list` does not match `?a0 * ?a0 list`
//│ ║  
//│ ╟── this tuple has type `?a * ?a list`
//│ ║  l.11: 	  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;
//│ ╙──      	                                                                    ^^^^^^
//│ ╔══[ERROR] Type `?a * ?b` does not match `?c list * ?b`
//│ ║  
//│ ╟──        ?a * ?b ---> ?d <--- ?c list * ?b 
//│ ║  
//│ ╟── this tuple literal has type `?a * ?b` and it flows into `?d`
//│ ║  l.9: 	    else (l1, l2);;
//│ ║       	         ^^^^^^^^
//│ ╟── this if-then-else expression has type `?d`
//│ ║  l.7: 	    if (List.length l1) < (List.length l2)
//│ ║       	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.8: 	    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│ ║       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this tuple literal has type `?c list * ?b` and it flows into `?d`
//│ ║  l.8: 	    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2)
//│ ╙──     	         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `?a * ?b` does not match `?a * ?c list`
//│ ║  
//│ ╟──        ?a * ?b ---> ?d <--- ?a * ?c list 
//│ ║  
//│ ╟── this tuple literal has type `?a * ?b`
//│ ║  l.9: 	    else (l1, l2);;
//│ ║       	         ^^^^^^^^
//│ ╟── this if-then-else expression has type `?a * ?b` and it flows into `?d`
//│ ║  l.7: 	    if (List.length l1) < (List.length l2)
//│ ║       	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.8: 	    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│ ║       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?d`
//│ ║  l.4: 	  if (List.length l1) > (List.length l2)
//│ ║       	  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.5: 	  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│ ║       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this tuple literal has type `?a * ?c list` and it flows into `?d`
//│ ║  l.5: 	  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
//│ ╙──     	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `?a list * ?b` does not match `?c * ?d list`
//│ ║  
//│ ╟──        ?a list * ?b ---> ?e <--- ?c * ?d list 
//│ ║  
//│ ╟── this tuple literal has type `?a list * ?b` and it flows into `?e`
//│ ║  l.8: 	    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2)
//│ ║       	         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?e`
//│ ║  l.7: 	    if (List.length l1) < (List.length l2)
//│ ║       	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.8: 	    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│ ║       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?f` and it flows from `?c * ?d list`
//│ ║  l.4: 	  if (List.length l1) > (List.length l2)
//│ ║       	  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.5: 	  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│ ║       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this tuple literal has type `?c * ?d list`
//│ ║  l.5: 	  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
//│ ╙──     	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ clone: 'a -> int -> list['b]
//│   where
//│     'a := 'b
//│     'b := 'a
//│ addTuple: (int, int,) -> int
//│ padZero: list['a] -> list['b] -> (list[int | 'a], list[int | 'b],)
//│ removeZero: list['a] -> list['a]


let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x = (a + x) mod 10 in
    let base = 0 in
    let args = List.map addTuple (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;
//│ ╔══[ERROR] Type `?a * ?b list` does not match `?c list * ?d`
//│ ║  
//│ ╟──        ?a * ?b list ---> ?e <--- ?c list * ?d 
//│ ║  
//│ ╟── this tuple literal has type `?a * ?b list` and it flows into `?e`
//│ ║  l.-75: 	  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
//│ ║         	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?e`
//│ ║  l.-76: 	  if (List.length l1) > (List.length l2)
//│ ║         	  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.-75: 	  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?e` and it flows from `?c list * ?d`
//│ ║  l.-73: 	    if (List.length l1) < (List.length l2)
//│ ║         	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.-72: 	    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this tuple literal has type `?c list * ?d`
//│ ║  l.-72: 	    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2)
//│ ╙──       	         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `?a list * ?b` does not match `?c * ?b`
//│ ║  
//│ ╟──        ?a list * ?b ---> ?d <--- ?c * ?b 
//│ ║  
//│ ╟── this tuple literal has type `?a list * ?b` and it flows into `?d`
//│ ║  l.-72: 	    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2)
//│ ║         	         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?d`
//│ ║  l.-73: 	    if (List.length l1) < (List.length l2)
//│ ║         	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.-72: 	    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this tuple literal has type `?c * ?b` and it flows into `?d`
//│ ║  l.-71: 	    else (l1, l2);;
//│ ╙──       	         ^^^^^^^^
//│ ╔══[ERROR] Type `?a * ?b list` does not match `?a * ?c`
//│ ║  
//│ ╟──        ?a * ?b list ---> ?d <--- ?a * ?c 
//│ ║  
//│ ╟── this tuple literal has type `?a * ?b list` and it flows into `?d`
//│ ║  l.-75: 	  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
//│ ║         	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?d`
//│ ║  l.-76: 	  if (List.length l1) > (List.length l2)
//│ ║         	  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.-75: 	  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?d` and it flows from `?a * ?c`
//│ ║  l.-73: 	    if (List.length l1) < (List.length l2)
//│ ║         	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.-72: 	    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this tuple literal has type `?a * ?c`
//│ ║  l.-71: 	    else (l1, l2);;
//│ ╙──       	         ^^^^^^^^
//│ ╔══[ERROR] Type `int` does not match `?a * ?b`
//│ ║  
//│ ╟── this integer literal has type `int`
//│ ║  l.4: 	    let base = 0 in
//│ ║       	               ^
//│ ╟── this reference has type `int`
//│ ║  l.6: 	    let (_,res) = List.fold_left f base args in res in
//│ ║       	                                   ^^^^
//│ ╟── this pattern has type `?a * ?b`
//│ ║  l.6: 	    let (_,res) = List.fold_left f base args in res in
//│ ╙──     	        ^^^^^^^
//│ bigAdd: list[int] -> list[int] -> list[nothing]

////////// file 0003

////////// ocamlc error
//
// File "0003.ml", line 23, characters 31-32:
// 23 |         (let (toSum1,toSum2) = x in
//                                     ^
// Error: This expression has type 'a list
//        but an expression was expected of type 'b * 'c

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;
let padZero l1 l2 =
  let numZeros = (List.length l1) - (List.length l2) in
  let absNumZeros = abs numZeros in
  if numZeros = 0
  then (l1, l2)
  else
    (let listZeros = clone 0 absNumZeros in
     if numZeros > 0 then (l1, (listZeros @ l2)) else ((listZeros @ l1), l2));;
let rec removeZero l =
  match l with | [] -> [] | 0::t -> removeZero t | h::t -> l;;
//│ ╔══[ERROR] Type `?a list * ?b` does not match `?c * ?d list`
//│ ║  
//│ ╟──        ?a list * ?b ---> ?e <--- ?c * ?d list 
//│ ║  
//│ ╟── this tuple literal has type `?a list * ?b` and it flows into `?e`
//│ ║  l.9: 	     if numZeros > 0 then (l1, (listZeros @ l2)) else ((listZeros @ l1), l2));;
//│ ║       	                                                      ^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?e`
//│ ║  l.9: 	     if numZeros > 0 then (l1, (listZeros @ l2)) else ((listZeros @ l1), l2));;
//│ ║       	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this tuple literal has type `?c * ?d list` and it flows into `?e`
//│ ║  l.9: 	     if numZeros > 0 then (l1, (listZeros @ l2)) else ((listZeros @ l1), l2));;
//│ ╙──     	                          ^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `?a list * ?b` does not match `?c * ?b`
//│ ║  
//│ ╟──        ?a list * ?b ---> ?d <--- ?c * ?b 
//│ ║  
//│ ╟── this tuple literal has type `?a list * ?b` and it flows into `?d`
//│ ║  l.9: 	     if numZeros > 0 then (l1, (listZeros @ l2)) else ((listZeros @ l1), l2));;
//│ ║       	                                                      ^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?d`
//│ ║  l.9: 	     if numZeros > 0 then (l1, (listZeros @ l2)) else ((listZeros @ l1), l2));;
//│ ║       	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?e` and it flows from `?c * ?b`
//│ ║  l.5: 	  if numZeros = 0
//│ ║       	  ^^^^^^^^^^^^^^^
//│ ║  l.6: 	  then (l1, l2) ...
//│ ║       	^^^^^^^^^^^^^^^
//│ ╟── this tuple literal has type `?c * ?b`
//│ ║  l.6: 	  then (l1, l2)
//│ ╙──     	       ^^^^^^^^
//│ ╔══[ERROR] Type `?a * ?b list` does not match `?a * ?c`
//│ ║  
//│ ╟──        ?a * ?b list ---> ?d <--- ?a * ?c 
//│ ║  
//│ ╟── this tuple literal has type `?a * ?b list` and it flows into `?d`
//│ ║  l.9: 	     if numZeros > 0 then (l1, (listZeros @ l2)) else ((listZeros @ l1), l2));;
//│ ║       	                          ^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?d`
//│ ║  l.9: 	     if numZeros > 0 then (l1, (listZeros @ l2)) else ((listZeros @ l1), l2));;
//│ ║       	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?e` and it flows from `?a * ?c`
//│ ║  l.5: 	  if numZeros = 0
//│ ║       	  ^^^^^^^^^^^^^^^
//│ ║  l.6: 	  then (l1, l2) ...
//│ ║       	^^^^^^^^^^^^^^^
//│ ╟── this tuple literal has type `?a * ?c`
//│ ║  l.6: 	  then (l1, l2)
//│ ╙──     	       ^^^^^^^^
//│ clone: 'a -> int -> list['b]
//│   where
//│     'a := 'b
//│     'b := 'a
//│ padZero: (list['a] & 'b) -> (list['c] & 'd) -> (list['a | int] | 'b, list['c | int] | 'd,)
//│ removeZero: (list[int] & 'a & 'b) -> 'a
//│   where
//│     'a := 'b
//│     'b := 'a

:unify
let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (carry,currentSum) = a in
      if x = []
      then (0, (carry :: currentSum))
      else
        (let (toSum1,toSum2) = x in
         let intermediateValue = (toSum1 + toSum2) + carry in
         let valueToAddToArray = intermediateValue mod 10 in
         let carry = intermediateValue / 10 in
         (carry, (valueToAddToArray :: currentSum))) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;
//│ ╔══[ERROR] Type `?a * ?b` does not match `?a * ?c list`
//│ ║  
//│ ╟──        ?a * ?b ---> ?d <--- ?a * ?c list 
//│ ║  
//│ ╟── this tuple literal has type `?a * ?b` and it flows into `?d`
//│ ║  l.-65: 	  then (l1, l2)
//│ ║         	       ^^^^^^^^
//│ ╟── this if-then-else expression has type `?d`
//│ ║  l.-66: 	  if numZeros = 0
//│ ║         	  ^^^^^^^^^^^^^^^
//│ ║  l.-65: 	  then (l1, l2) ...
//│ ║         	^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?d` and it flows from `?a * ?c list`
//│ ║  l.-62: 	     if numZeros > 0 then (l1, (listZeros @ l2)) else ((listZeros @ l1), l2));;
//│ ║         	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this tuple literal has type `?a * ?c list`
//│ ║  l.-62: 	     if numZeros > 0 then (l1, (listZeros @ l2)) else ((listZeros @ l1), l2));;
//│ ╙──       	                          ^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `?a * ?b list` does not match `?c list * ?d`
//│ ║  
//│ ╟──        ?a * ?b list ---> ?e <--- ?c list * ?d 
//│ ║  
//│ ╟── this tuple literal has type `?a * ?b list` and it flows into `?e`
//│ ║  l.-62: 	     if numZeros > 0 then (l1, (listZeros @ l2)) else ((listZeros @ l1), l2));;
//│ ║         	                          ^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?e`
//│ ║  l.-62: 	     if numZeros > 0 then (l1, (listZeros @ l2)) else ((listZeros @ l1), l2));;
//│ ║         	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this tuple literal has type `?c list * ?d` and it flows into `?e`
//│ ║  l.-62: 	     if numZeros > 0 then (l1, (listZeros @ l2)) else ((listZeros @ l1), l2));;
//│ ╙──       	                                                      ^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `?a * ?b` does not match `?c list * ?b`
//│ ║  
//│ ╟──        ?a * ?b ---> ?d <--- ?c list * ?b 
//│ ║  
//│ ╟── this tuple literal has type `?a * ?b` and it flows into `?d`
//│ ║  l.-65: 	  then (l1, l2)
//│ ║         	       ^^^^^^^^
//│ ╟── this if-then-else expression has type `?d`
//│ ║  l.-66: 	  if numZeros = 0
//│ ║         	  ^^^^^^^^^^^^^^^
//│ ║  l.-65: 	  then (l1, l2) ...
//│ ║         	^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?d` and it flows from `?c list * ?b`
//│ ║  l.-62: 	     if numZeros > 0 then (l1, (listZeros @ l2)) else ((listZeros @ l1), l2));;
//│ ║         	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this tuple literal has type `?c list * ?b`
//│ ║  l.-62: 	     if numZeros > 0 then (l1, (listZeros @ l2)) else ((listZeros @ l1), l2));;
//│ ╙──       	                                                      ^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `int * ?a list` does not match `int * ?a0 list`
//│ ║  
//│ ╟──        int * ?a list ---> ?b <--- int * ?a0 list 
//│ ║  
//│ ╟── this tuple literal has type `int * ?a list` and it flows into `?b`
//│ ║  l.13: 	    let base = (0, []) in
//│ ║        	               ^^^^^^^
//│ ╟── this reference has type `?b`
//│ ║  l.15: 	    let (_,res) = List.fold_left f base args in res in
//│ ║        	                                   ^^^^
//│ ╟── this let expression has type `?c`
//│ ║  l.4: 	      let (carry,currentSum) = a in
//│ ║       	      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.5: 	      if x = [] ...
//│ ║       	^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?c` and it flows from `int * ?a0 list`
//│ ║  l.5: 	      if x = []
//│ ║       	      ^^^^^^^^^
//│ ║  l.6: 	      then (0, (carry :: currentSum)) ...
//│ ║       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this tuple literal has type `int * ?a0 list`
//│ ║  l.6: 	      then (0, (carry :: currentSum))
//│ ╙──     	           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `int * ?a list` does not match `int * ?a0 list`
//│ ║  
//│ ╟──        int * ?a list ---> ?b <--- int * ?a0 list 
//│ ║  
//│ ╟── this tuple literal has type `int * ?a list` and it flows into `?b`
//│ ║  l.13: 	    let base = (0, []) in
//│ ║        	               ^^^^^^^
//│ ╟── this reference has type `?b`
//│ ║  l.15: 	    let (_,res) = List.fold_left f base args in res in
//│ ║        	                                   ^^^^
//│ ╟── this let expression has type `?c`
//│ ║  l.4: 	      let (carry,currentSum) = a in
//│ ║       	      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.5: 	      if x = [] ...
//│ ║       	^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?c`
//│ ║  l.5: 	      if x = []
//│ ║       	      ^^^^^^^^^
//│ ║  l.6: 	      then (0, (carry :: currentSum)) ...
//│ ║       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this let expression has type `?c` and it flows from `int * ?a0 list`
//│ ║  l.8: 	        (let (toSum1,toSum2) = x in
//│ ║       	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.9: 	         let intermediateValue = (toSum1 + toSum2) + carry in ...
//│ ║       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this tuple literal has type `int * ?a0 list`
//│ ║  l.12: 	         (carry, (valueToAddToArray :: currentSum))) in
//│ ╙──      	         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `int * ?a list` does not match `int * ?a0 list`
//│ ║  
//│ ╟──        int * ?a list ---> ?b <--- int * ?a0 list 
//│ ║  
//│ ╟── this tuple literal has type `int * ?a list` and it flows into `?b`
//│ ║  l.6: 	      then (0, (carry :: currentSum))
//│ ║       	           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?b`
//│ ║  l.5: 	      if x = []
//│ ║       	      ^^^^^^^^^
//│ ║  l.6: 	      then (0, (carry :: currentSum)) ...
//│ ║       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this let expression has type `?b` and it flows from `int * ?a0 list`
//│ ║  l.8: 	        (let (toSum1,toSum2) = x in
//│ ║       	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.9: 	         let intermediateValue = (toSum1 + toSum2) + carry in ...
//│ ║       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this tuple literal has type `int * ?a0 list`
//│ ║  l.12: 	         (carry, (valueToAddToArray :: currentSum))) in
//│ ╙──      	         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `int * ?b` does not match `?a * ?a list`
//│ ║  
//│ ╟── this tuple has type `int * ?b`
//│ ║  l.12: 	         (carry, (valueToAddToArray :: currentSum))) in
//│ ╙──      	                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `?b * ?c` does not match `?a * ?a list`
//│ ║  
//│ ╟── this tuple has type `?b * ?c`
//│ ║  l.6: 	      then (0, (carry :: currentSum))
//│ ╙──     	                ^^^^^^^^^^^^^^^^^^^
//│ bigAdd: list[int] -> list[int] -> list[int]

// TODO weird error not there before
// ╔══[ERROR] Type `?b * ?c` does not match `?a list`
// ║  
// ╟──        ?b * ?c ---> ?d <--- ?a list 
// ║  
// ╟── `?b * ?c` comes from this type expression
// ║  builtin: 	let List.combine: 'a list -> 'b list -> ('a * 'b) list
// ║           	                                         ^^^^^^^
// ╟── this variable has type `?b * ?c` and it flows into `?d`
// ║  l.3: 	    let f a x =
// ║       	            ^
// ╟── this reference has type `?d`
// ║  l.5: 	      if x = []
// ║       	         ^
// ╟── this reference has type `?a list` and it flows into `?d`
// ║  l.5: 	      if x = []
// ╙──     	             ^^

////////// file 1948

////////// ocamlc error
//
// File "1948.ml", line 43, characters 46-70:
// 43 |     match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//                                                    ^^^^^^^^^^^^^^^^^^^^^^^^
// Error: This expression has type 'a * 'b
//        but an expression was expected of type int list

let rec helper x = if x = 0 then 1 else 10 * (helper (x - 1));;
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;
let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
  else
    if (List.length l1) < (List.length l2)
    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2)
    else (l1, l2);;
let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;
let rec tenEx x y =
  match y with | [] -> [] | h::t -> (tenEx (x + 1) t) @ [(helper x) * h];;
let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (x1,x2) = x in
      let (carry,res) = a in
      ((((x1 + x2) + carry) / 10), ((mod ((x1 + x2) + carry) 10) :: res)) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (carry,res) = List.fold_left f base args in [carry] @ res in
  removeZero (add (padZero l1 l2));;
let rec mulByDigit i l =
  let f a x =
    let carry = i * x in
    match a with
    | h::t -> ((h + carry) / 10) :: (mod (h + carry) 10) :: t
    | _ -> [carry / 10; mod carry 10] in
  let base = [] in removeZero (List.fold_left f base (List.rev l));;
//│ ╔══[ERROR] Type `int * ?a list` does not match `?a0 * ?a0 list`
//│ ║  
//│ ╟── this tuple has type `int * ?a list`
//│ ║  l.29: 	    | _ -> [carry / 10; mod carry 10] in
//│ ╙──      	            ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `int * ?a list` does not match `?a0 * ?a0 list`
//│ ║  
//│ ╟── this tuple has type `int * ?a list`
//│ ║  l.29: 	    | _ -> [carry / 10; mod carry 10] in
//│ ╙──      	                        ^^^^^^^^^^^^
//│ ╔══[ERROR] Type `int * ?a list` does not match `?a0 * ?a0 list`
//│ ║  
//│ ╟── this tuple has type `int * ?a list`
//│ ║  l.28: 	    | h::t -> ((h + carry) / 10) :: (mod (h + carry) 10) :: t
//│ ╙──      	              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `int * ?a list` does not match `?a0 * ?a0 list`
//│ ║  
//│ ╟── this tuple has type `int * ?a list`
//│ ║  l.28: 	    | h::t -> ((h + carry) / 10) :: (mod (h + carry) 10) :: t
//│ ╙──      	                                    ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `?a * ?b list` does not match `?c list * ?d`
//│ ║  
//│ ╟──        ?a * ?b list ---> ?e <--- ?c list * ?d 
//│ ║  
//│ ╟── this tuple literal has type `?a * ?b list` and it flows into `?e`
//│ ║  l.5: 	  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
//│ ║       	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?e`
//│ ║  l.4: 	  if (List.length l1) > (List.length l2)
//│ ║       	  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.5: 	  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│ ║       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?e` and it flows from `?c list * ?d`
//│ ║  l.7: 	    if (List.length l1) < (List.length l2)
//│ ║       	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.8: 	    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│ ║       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this tuple literal has type `?c list * ?d`
//│ ║  l.8: 	    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2)
//│ ╙──     	         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `?a * ?b list` does not match `?a * ?c`
//│ ║  
//│ ╟──        ?a * ?b list ---> ?d <--- ?a * ?c 
//│ ║  
//│ ╟── this tuple literal has type `?a * ?b list` and it flows into `?d`
//│ ║  l.5: 	  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
//│ ║       	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?d`
//│ ║  l.4: 	  if (List.length l1) > (List.length l2)
//│ ║       	  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.5: 	  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│ ║       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?d` and it flows from `?a * ?c`
//│ ║  l.7: 	    if (List.length l1) < (List.length l2)
//│ ║       	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.8: 	    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│ ║       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this tuple literal has type `?a * ?c`
//│ ║  l.9: 	    else (l1, l2);;
//│ ╙──     	         ^^^^^^^^
//│ ╔══[ERROR] Type `?a list * ?b` does not match `?c * ?b`
//│ ║  
//│ ╟──        ?a list * ?b ---> ?d <--- ?c * ?b 
//│ ║  
//│ ╟── this tuple literal has type `?a list * ?b` and it flows into `?d`
//│ ║  l.8: 	    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2)
//│ ║       	         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?d`
//│ ║  l.7: 	    if (List.length l1) < (List.length l2)
//│ ║       	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.8: 	    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│ ║       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this tuple literal has type `?c * ?b` and it flows into `?d`
//│ ║  l.9: 	    else (l1, l2);;
//│ ╙──     	         ^^^^^^^^
//│ ╔══[ERROR] Type `?b * ?a list` does not match `?a0 * ?a0 list`
//│ ║  
//│ ╟── this tuple has type `?b * ?a list`
//│ ║  l.22: 	    let (carry,res) = List.fold_left f base args in [carry] @ res in
//│ ╙──      	                                                     ^^^^^
//│ ╔══[ERROR] Type `int * ?a list` does not match `int * ?a0 list`
//│ ║  
//│ ╟──        int * ?a list ---> ?b <--- int * ?a0 list 
//│ ║  
//│ ╟── this tuple literal has type `int * ?a list` and it flows into `?b`
//│ ║  l.20: 	    let base = (0, []) in
//│ ║        	               ^^^^^^^
//│ ╟── this reference has type `?b`
//│ ║  l.22: 	    let (carry,res) = List.fold_left f base args in [carry] @ res in
//│ ║        	                                       ^^^^
//│ ╟── this let expression has type `?b`
//│ ║  l.17: 	      let (x1,x2) = x in
//│ ║        	      ^^^^^^^^^^^^^^^^^^
//│ ║  l.18: 	      let (carry,res) = a in ...
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this let expression has type `?b` and it flows from `int * ?a0 list`
//│ ║  l.18: 	      let (carry,res) = a in
//│ ║        	      ^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.19: 	      ((((x1 + x2) + carry) / 10), ((mod ((x1 + x2) + carry) 10) :: res)) in
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this tuple literal has type `int * ?a0 list`
//│ ║  l.19: 	      ((((x1 + x2) + carry) / 10), ((mod ((x1 + x2) + carry) 10) :: res)) in
//│ ╙──      	      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `int * ?b` does not match `?a * ?a list`
//│ ║  
//│ ╟── this tuple has type `int * ?b`
//│ ║  l.19: 	      ((((x1 + x2) + carry) / 10), ((mod ((x1 + x2) + carry) 10) :: res)) in
//│ ╙──      	                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `int * ?a list` does not match `?a0 * ?a0 list`
//│ ║  
//│ ╟── this tuple has type `int * ?a list`
//│ ║  l.13: 	  match y with | [] -> [] | h::t -> (tenEx (x + 1) t) @ [(helper x) * h];;
//│ ╙──      	                                                         ^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `?a * ?a list` does not match `?a0 * ?a0 list`
//│ ║  
//│ ╟── this tuple has type `?a * ?a list`
//│ ║  l.11: 	  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;
//│ ╙──      	                                                                    ^^^^^^
//│ ╔══[ERROR] Type `?a * ?b` does not match `?c list * ?b`
//│ ║  
//│ ╟──        ?a * ?b ---> ?d <--- ?c list * ?b 
//│ ║  
//│ ╟── this tuple literal has type `?a * ?b` and it flows into `?d`
//│ ║  l.9: 	    else (l1, l2);;
//│ ║       	         ^^^^^^^^
//│ ╟── this if-then-else expression has type `?d`
//│ ║  l.7: 	    if (List.length l1) < (List.length l2)
//│ ║       	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.8: 	    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│ ║       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this tuple literal has type `?c list * ?b` and it flows into `?d`
//│ ║  l.8: 	    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2)
//│ ╙──     	         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `?a list * ?b` does not match `?c * ?d list`
//│ ║  
//│ ╟──        ?a list * ?b ---> ?e <--- ?c * ?d list 
//│ ║  
//│ ╟── this tuple literal has type `?a list * ?b` and it flows into `?e`
//│ ║  l.8: 	    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2)
//│ ║       	         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?e`
//│ ║  l.7: 	    if (List.length l1) < (List.length l2)
//│ ║       	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.8: 	    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│ ║       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?f` and it flows from `?c * ?d list`
//│ ║  l.4: 	  if (List.length l1) > (List.length l2)
//│ ║       	  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.5: 	  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│ ║       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this tuple literal has type `?c * ?d list`
//│ ║  l.5: 	  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
//│ ╙──     	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `?a * ?b` does not match `?a * ?c list`
//│ ║  
//│ ╟──        ?a * ?b ---> ?d <--- ?a * ?c list 
//│ ║  
//│ ╟── this tuple literal has type `?a * ?b` and it flows into `?d`
//│ ║  l.9: 	    else (l1, l2);;
//│ ║       	         ^^^^^^^^
//│ ╟── this if-then-else expression has type `?d`
//│ ║  l.7: 	    if (List.length l1) < (List.length l2)
//│ ║       	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.8: 	    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│ ║       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?e` and it flows from `?a * ?c list`
//│ ║  l.4: 	  if (List.length l1) > (List.length l2)
//│ ║       	  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.5: 	  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│ ║       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this tuple literal has type `?a * ?c list`
//│ ║  l.5: 	  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
//│ ╙──     	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ helper: int -> int
//│ clone: 'a -> int -> list['b]
//│   where
//│     'a := 'b
//│     'b := 'a
//│ padZero: list['a] -> list['b] -> (list[int | 'a], list[int | 'b],)
//│ removeZero: list['a] -> list['a]
//│ tenEx: int -> list[int] -> list[int]
//│ bigAdd: list[int] -> list[int] -> list[int]
//│ mulByDigit: int -> list[int] -> list[int]

// FIXME: no common provs
:unify
let bigMul l1 l2 =
  let f a x =
    let (x1,x2) = x in
    let (carry,res) = a in
    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
  let base = (0, []) in
  let args = l1 (tenEx 0 l2) in
  let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ ╔══[ERROR] Type `?b * ?a list` does not match `?a0 * ?a0 list`
//│ ║  
//│ ╟── this tuple has type `?b * ?a list`
//│ ║  l.8: 	  let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ ╙──     	                                                   ^^^^^
//│ /!!!\ Uncaught error: scala.NotImplementedError: an implementation is missing

////////// file 2361

////////// ocamlc error
// 
// File "2361.ml", line 12, characters 46-51:
// 12 |   | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//                                                    ^^^^^
// Error: This expression has type bool but an expression was expected of type
//          int

let rec digitsOfInt n =
  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [mod n 10];;
let rec addNumbs n = match n with | [] -> 0 | h::t -> h + (addNumbs t);;
let digits n = digitsOfInt (abs n);;
//│ ╔══[ERROR] Type `int * ?a list` does not match `?a0 * ?a0 list`
//│ ║  
//│ ╟── this tuple has type `int * ?a list`
//│ ║  l.2: 	  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [mod n 10];;
//│ ╙──     	                                                   ^^^^^^^^
//│ digitsOfInt: int -> list[int]
//│ addNumbs: list[int] -> int
//│ digits: int -> list[int]

:unify
let rec additivePersistence n =
  match digits n with
  | [] -> 0
  | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ ╔══[ERROR] Type `?a * ?a list` does not match `?a0 * ?a0 list`
//│ ║  
//│ ╟── this tuple has type `?a * ?a list`
//│ ║  l.4: 	  | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ ╙──     	                          ^^^^^^
//│ ╔══[ERROR] Type `bool` does not match `int`
//│ ║  
//│ ╟──        bool ---> ?a <--- int 
//│ ║  
//│ ╟── this `then` branch has type `bool` and it flows into `?a`
//│ ║  l.4: 	  | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ ║       	                                              ^^^^^
//│ ╟── this if-then-else expression has type `?a`
//│ ║  l.4: 	  | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ ║       	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this match expression has type `?b` and it flows from `int`
//│ ║  l.2: 	  match digits n with
//│ ║       	  ^^^^^^^^^^^^^^^^^^^
//│ ║  l.3: 	  | [] -> 0 ...
//│ ║       	^^^^^^^^^^^
//│ ╟── this integer literal has type `int`
//│ ║  l.3: 	  | [] -> 0
//│ ╙──     	          ^
//│ additivePersistence: int -> (bool | int)
