:AllowTypeErrors

// file 246
let rec cloneHelper x n l =
  if n <= 0 then l else cloneHelper x (n - 1) (x :: l);;
let rec clone x n = if n < 1 then [] else cloneHelper x n [];;
let padZero l1 l2 =
  let diff = (List.length l1) - (List.length l2) in
  if diff < 0
  then (((clone 0 (-1 * diff)) @ l1), l2)
  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
let rec removeZero l =
  match l with | [] -> [] | hd::tl -> if hd = 0 then removeZero tl else l;;
let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x = padZero l1 l2 in
    let base = List.combine l1 l2 in
    let args = failwith "to be implemented" in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;
//│ ╔══[ERROR] Type `?a * ?b list` does not match `?c * ?d`
//│ ║  
//│ ╟── `?a * ?b list` comes from this type expression
//│ ║  builtin: 	let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ ║           	                                         ^^^^^^^^^^^^^
//│ ╟── this application has type `?a * ?b list`
//│ ║  l.14: 	    let base = List.combine l1 l2 in
//│ ║        	               ^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?c * ?d`
//│ ║  l.16: 	    let (_,res) = List.fold_left f base args in res in
//│ ║        	                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this pattern has type `?c * ?d`
//│ ║  l.16: 	    let (_,res) = List.fold_left f base args in res in
//│ ╙──      	        ^^^^^^^
//│ ╔══[ERROR] Type `?a * ?b` does not match `?c * ?d list`
//│ ║  
//│ ╟──        ?a * ?b ---> ?e <--- ?c * ?d list 
//│ ║  
//│ ╟── this tuple literal has type `?a * ?b`
//│ ║  l.7: 	  then (((clone 0 (-1 * diff)) @ l1), l2)
//│ ║       	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?a * ?b`
//│ ║  l.6: 	  if diff < 0
//│ ║       	  ^^^^^^^^^^^
//│ ║  l.7: 	  then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│ ║       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?a * ?b` and it flows into `?e`
//│ ║  l.13: 	    let f a x = padZero l1 l2 in
//│ ║        	                ^^^^^^^^^^^^^
//│ ╟── this application has type `?e`
//│ ║  l.16: 	    let (_,res) = List.fold_left f base args in res in
//│ ║        	                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this reference has type `?e`
//│ ║  l.16: 	    let (_,res) = List.fold_left f base args in res in
//│ ║        	                                   ^^^^
//│ ╟── this application has type `?e` and it flows from `?c * ?d list`
//│ ║  l.14: 	    let base = List.combine l1 l2 in
//│ ║        	               ^^^^^^^^^^^^^^^^^^
//│ ╟── this applied type reference has type `?c * ?d list`
//│ ║  builtin: 	let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ ╙──         	                                         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `?a * ?b` does not match `?c * ?d list`
//│ ║  
//│ ╟──        ?a * ?b ---> ?e <--- ?c * ?d list 
//│ ║  
//│ ╟── this tuple literal has type `?a * ?b`
//│ ║  l.8: 	  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ ║       	                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?a * ?b`
//│ ║  l.8: 	  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ ║       	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?a * ?b`
//│ ║  l.6: 	  if diff < 0
//│ ║       	  ^^^^^^^^^^^
//│ ║  l.7: 	  then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│ ║       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?a * ?b` and it flows into `?e`
//│ ║  l.13: 	    let f a x = padZero l1 l2 in
//│ ║        	                ^^^^^^^^^^^^^
//│ ╟── this application has type `?e`
//│ ║  l.16: 	    let (_,res) = List.fold_left f base args in res in
//│ ║        	                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this reference has type `?e`
//│ ║  l.16: 	    let (_,res) = List.fold_left f base args in res in
//│ ║        	                                   ^^^^
//│ ╟── this application has type `?e` and it flows from `?c * ?d list`
//│ ║  l.14: 	    let base = List.combine l1 l2 in
//│ ║        	               ^^^^^^^^^^^^^^^^^^
//│ ╟── this applied type reference has type `?c * ?d list`
//│ ║  builtin: 	let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ ╙──         	                                         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `?a * ?b` does not match `?c * ?d list`
//│ ║  
//│ ╟──        ?a * ?b ---> ?e <--- ?c * ?d list 
//│ ║  
//│ ╟── this tuple literal has type `?a * ?b`
//│ ║  l.8: 	  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ ║       	                                                         ^^^^^^^^
//│ ╟── this if-then-else expression has type `?a * ?b`
//│ ║  l.8: 	  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ ║       	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?a * ?b`
//│ ║  l.6: 	  if diff < 0
//│ ║       	  ^^^^^^^^^^^
//│ ║  l.7: 	  then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│ ║       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?a * ?b` and it flows into `?e`
//│ ║  l.13: 	    let f a x = padZero l1 l2 in
//│ ║        	                ^^^^^^^^^^^^^
//│ ╟── this application has type `?e`
//│ ║  l.16: 	    let (_,res) = List.fold_left f base args in res in
//│ ║        	                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this reference has type `?e`
//│ ║  l.16: 	    let (_,res) = List.fold_left f base args in res in
//│ ║        	                                   ^^^^
//│ ╟── this application has type `?e` and it flows from `?c * ?d list`
//│ ║  l.14: 	    let base = List.combine l1 l2 in
//│ ║        	               ^^^^^^^^^^^^^^^^^^
//│ ╟── this applied type reference has type `?c * ?d list`
//│ ║  builtin: 	let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ ╙──         	                                         ^^^^^^^^^^^^^
//│ cloneHelper: anything -> int -> (list[?] & 'a & 'b) -> 'a
//│   where
//│     'a := 'b
//│     'b := 'a
//│ clone: 'a -> int -> list['a]
//│ padZero: (list['a] & 'b) -> (list['c] & 'd) -> (list[int | 'a] | 'b, list[int | 'c] | 'd,)
//│ removeZero: (list[?] & 'a & 'b & 'c) -> 'b
//│   where
//│     'a <: 'b & 'c
//│     'b :> 'c
//│        <: 'a & 'c
//│     'c :> 'b
//│        <: 'a & 'b
//│ bigAdd: list[?] -> (list['a] & 'b & 'c & 'd) -> 'd
//│   where
//│     'b <: 'c & 'd
//│     'c :> 'd
//│        <: 'b & 'd
//│     'd :> list[int | 'a] | 'c
//│        <: 'b & 'c

// file 67 mod
type expr =
    VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;
let pi = 4.0 *. (atan 1.0);;
let rec eval (e,x,y) =
  match e with
  | VarX  -> x
  | VarY  -> y
  | Sine e' -> sin (pi *. (eval (e', x, y)))
  | Cosine e' -> cos (pi *. (eval (e', x, y)))
  | Average (e1,e2) -> ((eval (e, x, y)) +. (eval (e2, x, y))) /. 2
  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))
  | Thresh (e1,e2,e3,e4) ->
      if (eval (e1, x, y)) < (eval (e2, x, y))
      then eval (e3, x, y)
      else eval (e4, x, y);;
//│ Defined type alias expr
//│ Defined class VarX
//│ Defined class VarY
//│ Defined class Sine
//│ Defined class Cosine
//│ Defined class Average
//│ Defined class Times
//│ Defined class Thresh
//│ VarX: expr
//│ VarY: expr
//│ Sine: expr -> expr
//│ Cosine: expr -> expr
//│ Average: (expr, expr,) -> expr
//│ Times: (expr, expr,) -> expr
//│ Thresh: (expr, expr, expr, expr,) -> expr
//│ pi: float
//│ eval: (expr, float & 'a & 'b & 'c & 'd, float & 'a & 'b & 'c & 'd,) -> 'b
//│   where
//│     'a <: float & 'b & 'c & 'd
//│     'b :> float | 'd
//│        <: float & 'a & 'c & 'd
//│     'd :> 'c
//│        <: float & 'a & 'b & 'c
//│     'c :> 'd
//│        <: float & 'a & 'b & 'd

// FIXME file 1087 mod
let sqsum xs =
  let f a x = match x with | [] -> 0 | h::t -> 1 in
  let base = List.hd xs in List.fold_left f base xs;;
//│ /!!!\ Uncaught error: scala.NotImplementedError: an implementation is missing


// file 26 mod
let rec sepConcat sep sl =
  match sl with
  | [] -> ""
  | h::t ->
      let f a x = a ^ (sep ^ x) in
      let base = h in let l = t in List.fold_left f base l;;
let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│ ╔══[ERROR] Type `string` does not match `?a * ?b -> ?c`
//│ ║  
//│ ╟── `string` comes from this type expression
//│ ║  builtin: 	let (^): string -> string -> string
//│ ║           	                             ^^^^^^
//│ ╟── this operator application has type `string`
//│ ║  l.5: 	      let f a x = a ^ (sep ^ x) in
//│ ║       	                  ^^^^^^^^^^^^^
//│ ╟── this match expression has type `?a * ?b -> ?c`
//│ ║  l.2: 	  match sl with
//│ ║       	  ^^^^^^^^^^^^^
//│ ║  l.3: 	  | [] -> "" ...
//│ ║       	^^^^^^^^^^^^
//│ ╟── this application has type `?a * ?b -> ?c`
//│ ║  l.7: 	let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│ ╙──     	                               ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `(?b -> ?c) -> ?b list -> ?c list` does not match `?a list`
//│ ║  
//│ ╟── `(?b -> ?c) -> ?b list -> ?c list` comes from this type expression
//│ ║  builtin: 	let List.map: ('a -> 'b) -> 'a list -> 'b list
//│ ║           	               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this reference has type `(?b -> ?c) -> ?b list -> ?c list`
//│ ║  l.7: 	let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│ ║       	                                              ^^^^^^^^
//│ ╟── this variable has type `(?b -> ?c) -> ?b list -> ?c list`
//│ ║  l.1: 	let rec sepConcat sep sl =
//│ ║       	                      ^^
//│ ╟── this variable has type `?a list`
//│ ║  l.1: 	let rec sepConcat sep sl =
//│ ║       	                      ^^
//│ ╟── this reference has type `?a list`
//│ ║  l.2: 	  match sl with
//│ ║       	        ^^
//│ ╟── this pattern has type `?a list`
//│ ║  l.3: 	  | [] -> ""
//│ ╙──     	    ^^
//│ sepConcat: string -> list[string] -> string
//│ stringOfList: anything -> anything -> string

// FIXME string indexing
// file 2376
let getHead h = match h with | [] -> [] | h::t -> h;;
let getTail t = match t with | [] -> [] | h::t -> t;;
let rec listReverse l =
  match l with | [] -> [] | h::t -> (listReverse t) @ [h];;
let rec matchHeads x y =
  match x with
  | [] -> true
  | h::t ->
      if (getHead x) = (getHead y) then matchHeads t (getTail y) else false;;
let explode s =
  let rec go i =
    if i >= (String_length s) then [] else (s[i]) :: (go (i + 1)) in
  go 0;;
let palindrome w =
  match explode w with
  | [] -> true
  | h::t -> matchHeads (explode w) (listReverse (explode w));;
//│ ╔══[ERROR] Type `?a Array` does not match `string`
//│ ║  
//│ ╟──        ?a Array <--- ?b ---> string 
//│ ║  
//│ ╟── this array access has type `?a Array`
//│ ║  l.12: 	    if i >= (String_length s) then [] else (s[i]) :: (go (i + 1)) in
//│ ║        	                                           ^^^^^^
//│ ╟── this reference has type `?a Array` and it flows from `?b`
//│ ║  l.12: 	    if i >= (String_length s) then [] else (s[i]) :: (go (i + 1)) in
//│ ║        	                                            ^
//│ ╟── this variable has type `?b`
//│ ║  l.10: 	let explode s =
//│ ║        	            ^
//│ ╟── this reference has type `?b` and it flows into `string`
//│ ║  l.12: 	    if i >= (String_length s) then [] else (s[i]) :: (go (i + 1)) in
//│ ║        	                           ^
//│ ╟── this type reference has type `string`
//│ ║  builtin: 	let String_length: string -> int
//│ ╙──         	                   ^^^^^^
//│ /!!!\ Uncaught error: scala.NotImplementedError: an implementation is missing


// file 1563 // TODO prov for match expression should be reversed
let rec sumListHelper total xs =
  match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
let rec digitsOfIntHelper n =
  if n < 1
  then []
  else if n >= 10 then (digitsOfIntHelper (n / 10)) @ [mod n 10] else [n];;
let rec digitsOfInt n = digitsOfIntHelper n;;
let rec sumList xs = sumListHelper 0 xs;;
let rec additivePersistence n = sumList digitsOfInt n;;
//│ ╔══[ERROR] Type `int` does not match `?a -> ?b`
//│ ║  
//│ ╟── this integer literal has type `int`
//│ ║  l.8: 	let rec sumList xs = sumListHelper 0 xs;;
//│ ║       	                                   ^
//│ ╟── this variable has type `int`
//│ ║  l.1: 	let rec sumListHelper total xs =
//│ ║       	                      ^^^^^
//│ ╟── this reference has type `int`
//│ ║  l.2: 	  match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│ ║       	                        ^^^^^
//│ ╟── this match expression has type `int`
//│ ║  l.2: 	  match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│ ║       	  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `int`
//│ ║  l.2: 	  match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│ ║       	                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this match expression has type `int`
//│ ║  l.2: 	  match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│ ║       	  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?a -> ?b`
//│ ║  l.8: 	let rec sumList xs = sumListHelper 0 xs;;
//│ ║       	                     ^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?a -> ?b`
//│ ║  l.9: 	let rec additivePersistence n = sumList digitsOfInt n;;
//│ ╙──     	                                ^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `?b -> ?c` does not match `?a list`
//│ ║  
//│ ╟── this function has type `?b -> ?c`
//│ ║  l.7: 	let rec digitsOfInt n = digitsOfIntHelper n;;
//│ ║       	                    ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this recursive binding has type `?b -> ?c`
//│ ║  l.7: 	let rec digitsOfInt n = digitsOfIntHelper n;;
//│ ║       	        ^^^^^^^^^^^
//│ ╟── this variable has type `?a list`
//│ ║  l.1: 	let rec sumListHelper total xs =
//│ ║       	                            ^^
//│ ╟── this reference has type `?a list`
//│ ║  l.2: 	  match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│ ║       	        ^^
//│ ╟── this pattern has type `?a list`
//│ ║  l.2: 	  match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│ ╙──     	                  ^^
//│ sumListHelper: (int & 'a & 'b) -> list[int] -> 'a
//│   where
//│     'a := 'b
//│     'b := 'a
//│ digitsOfIntHelper: int -> list[int]
//│ digitsOfInt: int -> list[int]
//│ sumList: list[int] -> int
//│ additivePersistence: anything -> nothing

// file 8776
// TODO list indexing here. skip this example?
let rec listReverse l =
  match l with | [] -> [] | h::t -> (listReverse t) @ [h];;
let getHeads y = match listReverse y with | [] -> [] | h::t -> [h];;
let loseTail z = match listReverse z with | [] -> [] | h::t -> t;;
let rec matchHeads x =
  match explode x with
  | h::t ->
      if (getHeads (explode x)) = []
      then true
      else if [h] = (getHeads t) then matchHeads (loseTail t) else false;;
//│ ╔══[ERROR] Type `?a list` does not match `?b Array`
//│ ║  
//│ ╟── this reference has type `?a list`
//│ ║  l.4: 	let loseTail z = match listReverse z with | [] -> [] | h::t -> t;;
//│ ║       	                                                  ^^
//│ ╟── this match expression has type `?a list`
//│ ║  l.4: 	let loseTail z = match listReverse z with | [] -> [] | h::t -> t;;
//│ ║       	                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?a list`
//│ ║  l.10: 	      else if [h] = (getHeads t) then matchHeads (loseTail t) else false;;
//│ ║        	                                                 ^^^^^^^^^^^^
//│ ╟── this variable has type `?b Array`
//│ ║  l.-93: 	let explode s =
//│ ║         	            ^
//│ ╟── this reference has type `?b Array`
//│ ║  l.-91: 	    if i >= (String_length s) then [] else (s[i]) :: (go (i + 1)) in
//│ ║         	                                            ^
//│ ╟── this array access has type `?b Array`
//│ ║  l.-91: 	    if i >= (String_length s) then [] else (s[i]) :: (go (i + 1)) in
//│ ╙──       	                                           ^^^^^^
//│ ╔══[ERROR] Type `?a list` does not match `string`
//│ ║  
//│ ╟── this reference has type `?a list`
//│ ║  l.4: 	let loseTail z = match listReverse z with | [] -> [] | h::t -> t;;
//│ ║       	                                                  ^^
//│ ╟── this match expression has type `?a list`
//│ ║  l.4: 	let loseTail z = match listReverse z with | [] -> [] | h::t -> t;;
//│ ║       	                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?a list`
//│ ║  l.10: 	      else if [h] = (getHeads t) then matchHeads (loseTail t) else false;;
//│ ║        	                                                 ^^^^^^^^^^^^
//│ ╟── this variable has type `string`
//│ ║  l.-93: 	let explode s =
//│ ║         	            ^
//│ ╟── this reference has type `string`
//│ ║  l.-91: 	    if i >= (String_length s) then [] else (s[i]) :: (go (i + 1)) in
//│ ║         	                           ^
//│ ╟── `string` comes from this type expression
//│ ║  builtin: 	let String_length: string -> int
//│ ╙──         	                   ^^^^^^
//│ ╔══[ERROR] Type `?a list` does not match `?b Array`
//│ ║  
//│ ╟── this reference has type `?a list`
//│ ║  l.4: 	let loseTail z = match listReverse z with | [] -> [] | h::t -> t;;
//│ ║       	                                                  ^^
//│ ╟── this match expression has type `?a list`
//│ ║  l.4: 	let loseTail z = match listReverse z with | [] -> [] | h::t -> t;;
//│ ║       	                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?a list`
//│ ║  l.10: 	      else if [h] = (getHeads t) then matchHeads (loseTail t) else false;;
//│ ║        	                                                 ^^^^^^^^^^^^
//│ ╟── this variable has type `?b Array`
//│ ║  l.-93: 	let explode s =
//│ ║         	            ^
//│ ╟── this reference has type `?b Array`
//│ ║  l.-91: 	    if i >= (String_length s) then [] else (s[i]) :: (go (i + 1)) in
//│ ║         	                                            ^
//│ ╟── this array access has type `?b Array`
//│ ║  l.-91: 	    if i >= (String_length s) then [] else (s[i]) :: (go (i + 1)) in
//│ ╙──       	                                           ^^^^^^
//│ ╔══[ERROR] Type `?a list` does not match `?b Array`
//│ ║  
//│ ╟── this reference has type `?a list`
//│ ║  l.4: 	let loseTail z = match listReverse z with | [] -> [] | h::t -> t;;
//│ ║       	                                                               ^
//│ ╟── this match expression has type `?a list`
//│ ║  l.4: 	let loseTail z = match listReverse z with | [] -> [] | h::t -> t;;
//│ ║       	                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?a list`
//│ ║  l.10: 	      else if [h] = (getHeads t) then matchHeads (loseTail t) else false;;
//│ ║        	                                                 ^^^^^^^^^^^^
//│ ╟── this variable has type `?b Array`
//│ ║  l.-93: 	let explode s =
//│ ║         	            ^
//│ ╟── this reference has type `?b Array`
//│ ║  l.-91: 	    if i >= (String_length s) then [] else (s[i]) :: (go (i + 1)) in
//│ ║         	                                            ^
//│ ╟── this array access has type `?b Array`
//│ ║  l.-91: 	    if i >= (String_length s) then [] else (s[i]) :: (go (i + 1)) in
//│ ╙──       	                                           ^^^^^^
//│ ╔══[ERROR] Type `?a list` does not match `string`
//│ ║  
//│ ╟── this reference has type `?a list`
//│ ║  l.4: 	let loseTail z = match listReverse z with | [] -> [] | h::t -> t;;
//│ ║       	                                                               ^
//│ ╟── this match expression has type `?a list`
//│ ║  l.4: 	let loseTail z = match listReverse z with | [] -> [] | h::t -> t;;
//│ ║       	                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?a list`
//│ ║  l.10: 	      else if [h] = (getHeads t) then matchHeads (loseTail t) else false;;
//│ ║        	                                                 ^^^^^^^^^^^^
//│ ╟── this variable has type `string`
//│ ║  l.-93: 	let explode s =
//│ ║         	            ^
//│ ╟── this reference has type `string`
//│ ║  l.-91: 	    if i >= (String_length s) then [] else (s[i]) :: (go (i + 1)) in
//│ ║         	                           ^
//│ ╟── `string` comes from this type expression
//│ ║  builtin: 	let String_length: string -> int
//│ ╙──         	                   ^^^^^^
//│ ╔══[ERROR] Type `?a list` does not match `?b Array`
//│ ║  
//│ ╟── this reference has type `?a list`
//│ ║  l.4: 	let loseTail z = match listReverse z with | [] -> [] | h::t -> t;;
//│ ║       	                                                               ^
//│ ╟── this match expression has type `?a list`
//│ ║  l.4: 	let loseTail z = match listReverse z with | [] -> [] | h::t -> t;;
//│ ║       	                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?a list`
//│ ║  l.10: 	      else if [h] = (getHeads t) then matchHeads (loseTail t) else false;;
//│ ║        	                                                 ^^^^^^^^^^^^
//│ ╟── this variable has type `?b Array`
//│ ║  l.-93: 	let explode s =
//│ ║         	            ^
//│ ╟── this reference has type `?b Array`
//│ ║  l.-91: 	    if i >= (String_length s) then [] else (s[i]) :: (go (i + 1)) in
//│ ║         	                                            ^
//│ ╟── this array access has type `?b Array`
//│ ║  l.-91: 	    if i >= (String_length s) then [] else (s[i]) :: (go (i + 1)) in
//│ ╙──       	                                           ^^^^^^
//│ /!!!\ Uncaught error: scala.NotImplementedError: an implementation is missing

// TODO: parse correctly
let explode s =
  let rec go i =
    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
  go 0;;
//│ ╔══[ERROR] Type `?a | undefined` does not match `?a | undefined`
//│ ║  
//│ ╙──
//│ ╔══[ERROR] Type `error` does not match `error`
//│ ║  
//│ ╟── this application has type `error`
//│ ║  l.3: 	    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│ ║       	            ^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `error`
//│ ║  l.3: 	    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│ ╙──     	            ^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `int` does not match `error`
//│ ║  
//│ ╟──        int ---> ?a <--- error 
//│ ║  
//│ ╟── `int` comes from this type expression
//│ ║  builtin: 	let (+): int -> int -> int
//│ ║           	                       ^^^
//│ ╟── this operator application has type `int`
//│ ║  l.3: 	    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│ ║       	                                                          ^^^^^^^
//│ ╟── this variable has type `int` and it flows into `?a`
//│ ║  l.2: 	  let rec go i =
//│ ║       	             ^
//│ ╟── this reference has type `?a`
//│ ║  l.3: 	    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│ ║       	       ^
//│ ╟── this application has type `error` and it flows into `?a`
//│ ║  l.3: 	    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│ ╙──     	            ^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] identifier not found: String.length
//│ ║  
//│ ║  l.485: 	    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│ ╙──       	             ^^^^^^^^^^^^^
//│ ╔══[ERROR] identifier not found: s.
//│ ║  
//│ ║  l.485: 	    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│ ╙──       	                                            ^^
//│ explode: error -> list[undefined]

// file 89
// TODO: parse properly
let rec digitsOfInt n =
  let return = [n mod 10] in
  if (n / 10) <> 0
  then ((n mod 10) :: return; (digitsOfInt (n / 10)) @ return)
  else return;;
let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t)
let rec digitalRoot n =
  let digits = digitsOfInt n in
  let s = sumList digits in
  if (n / 10) <> 0
  then (print_int n; print_endline " "; digitalRoot)
  else digits;;
//│ /!\ Parse error: Expected ")":4:29, found "; (digitsO" at l.532:29:   then ((n mod 10) :: return; (digitsOfInt (n / 10)) @ return)

// file 2361
let rec digitsOfInt n =
  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [mod n 10];;
let rec addNumbs n = match n with | [] -> 0 | h::t -> h + (addNumbs t);;
let digits n = digitsOfInt (abs n);;
let rec additivePersistence n =
  match digits n with
  | [] -> 0
  | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ ╔══[ERROR] Type `bool` does not match `int`
//│ ║  
//│ ╟── this `else` branch has type `bool`
//│ ║  l.8: 	  | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ ║       	                                                         ^^^^
//│ ╟── this if-then-else expression has type `bool`
//│ ║  l.8: 	  | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ ║       	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this match expression has type `int`
//│ ║  l.6: 	  match digits n with
//│ ║       	  ^^^^^^^^^^^^^^^^^^^
//│ ║  l.7: 	  | [] -> 0 ...
//│ ║       	^^^^^^^^^^^
//│ ╟── this integer literal has type `int`
//│ ║  l.7: 	  | [] -> 0
//│ ╙──     	          ^
//│ digitsOfInt: int -> list[int]
//│ addNumbs: list[int] -> int
//│ digits: int -> list[int]
//│ additivePersistence: int -> (bool | int)

// TODO: Create adts for built in types
// file 358 mod
// type expr used from previous
let buildCosine e = Cosine e;;
let buildSine e = Sine e;;
let buildX () = VarX;;
let buildY () = VarY;;
let rec build (rand,depth) =
  let r = rand 0.4 in
  match depth with
  | 0 -> if (r mod 2) = 0 then buildX else buildY
  | d ->
      if r = 0
      then buildSine build (rand, (d - 1))
      else buildCosine build (rand, (d - 1));;
//│ /!!!\ Uncaught error: java.lang.Exception: Internal Error: could not find type definition d

// TODO file 1337 in separate file to avoid collisions

// file 2752 mod
let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
let x l = List.map string_of_int;;
let y = [1, 2, 3];;
let rec mulByDigit i l =
  match List.rev l with
  | [] -> []
  | h::t -> [remainder x y] @ (mulByDigit i t);;
//│ ╔══[ERROR] Type `?a list` does not match `int`
//│ ║  
//│ ╟── this application has type `?a list`
//│ ║  l.3: 	let y = [1, 2, 3];;
//│ ║       	        ^^^^^^^^^
//│ ╟── this application has type `int`
//│ ║  l.3: 	let y = [1, 2, 3];;
//│ ║       	        ^^^^^^^^^
//│ ╟── this reference has type `int`
//│ ║  l.7: 	  | h::t -> [remainder x y] @ (mulByDigit i t);;
//│ ║       	                         ^
//│ ╟── this variable has type `int`
//│ ║  l.1: 	let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ ║       	                ^
//│ ╟── this reference has type `int`
//│ ║  l.1: 	let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ ║       	                                                  ^
//│ ╟── `int` comes from this type expression
//│ ║  builtin: 	let ( * ): int -> int -> int
//│ ╙──         	                  ^^^
//│ ╔══[ERROR] Type `?a -> ?b` does not match `int`
//│ ║  
//│ ╟── this function has type `?a -> ?b`
//│ ║  l.2: 	let x l = List.map string_of_int;;
//│ ║       	      ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this reference has type `?a -> ?b`
//│ ║  l.7: 	  | h::t -> [remainder x y] @ (mulByDigit i t);;
//│ ║       	                       ^
//│ ╟── this variable has type `?a -> ?b`
//│ ║  l.1: 	let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ ║       	              ^
//│ ╟── this variable has type `int`
//│ ║  l.1: 	let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ ║       	              ^
//│ ╟── this reference has type `int`
//│ ║  l.1: 	let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ ║       	                                              ^
//│ ╟── `int` comes from this type expression
//│ ║  builtin: 	let ( * ): int -> int -> int
//│ ╙──         	           ^^^
//│ remainder: int -> int -> int
//│ x: anything -> list[int] -> list[string]
//│ y: list[(int, int, int,)]
//│ mulByDigit: anything -> list[?] -> list[int]


// file 344 mod
let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
let padLength l1 l2 = abs ((List.length l1) - (List.length l2));;
let padZero l1 l2 =
  if (List.length l1) < (List.length l2)
  then (clone 0 (padLength l1 l2)) :: l1
  else (clone 0 (padLength l1 l2)) l2;;
//│ ╔══[ERROR] Type `?a list` does not match `?b -> ?c`
//│ ║  
//│ ╟── this `then` branch has type `?a list`
//│ ║  l.1: 	let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│ ║       	                                  ^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?b -> ?c`
//│ ║  l.1: 	let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│ ║       	                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?b -> ?c`
//│ ║  l.6: 	  else (clone 0 (padLength l1 l2)) l2;;
//│ ╙──     	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `?a list` does not match `?b -> ?c`
//│ ║  
//│ ╟── this `else` branch has type `?a list`
//│ ║  l.1: 	let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│ ║       	                                                              ^^
//│ ╟── this if-then-else expression has type `?a list`
//│ ║  l.1: 	let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│ ║       	                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?a list`
//│ ║  l.6: 	  else (clone 0 (padLength l1 l2)) l2;;
//│ ║       	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?b -> ?c`
//│ ║  l.1: 	let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│ ║       	                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?b -> ?c`
//│ ║  l.6: 	  else (clone 0 (padLength l1 l2)) l2;;
//│ ╙──     	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ clone: 'a -> int -> list['a]
//│ padLength: list[?] -> list[?] -> int
//│ padZero: list['a] -> list[?] -> list['a | list[int]]

// file 2736 [TODO different part of file has errors]
let rec addHelper (t,u) =
 match List.rev t with
 | [] -> []
 | h::t ->
    match List.rev u with
     | [] -> []
     | h'::t' ->
         if (h + h') > 10
         then (addHelper (t, t')) @ [(1 + h') + h]
         else (addHelper (t, t')) @ [h' + h];;
//│ addHelper: (list[int], list[int],) -> list[int]

:e
// file 1948 // TODO disconnected provs
let rec helper x = if x = 0 then 1 else 10 * (helper (x - 1));;
let rec tenEx x y =
  match y with | [] -> [] | h::t -> (tenEx (x + 1) t) @ [(helper x) * h];;
let bigMul l1 l2 =
  let f a x =
    let (x1,x2) = x in
    let (carry,res) = a in
    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
  let base = (0, []) in
  let args = l1 (tenEx 0 l2) in
  let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ ╔══[ERROR] Type `?a -> ?b` does not match `?c * ?d`
//│ ║  
//│ ╟── this function has type `?a -> ?b`
//│ ║  l.-685: 	let bigAdd l1 l2 =
//│ ║          	              ^^^^
//│ ║  l.-684: 	  let add (l1,l2) = ...
//│ ║          	^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?a -> ?b`
//│ ║  l.8: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║       	                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?c * ?d`
//│ ║  l.11: 	  let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ ║        	                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this pattern has type `?c * ?d`
//│ ║  l.11: 	  let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ ╙──      	      ^^^^^^^^^^^
//│ ╔══[ERROR] Type `?a -> ?b` does not match `?c * ?d`
//│ ║  
//│ ╟── this function has type `?a -> ?b`
//│ ║  l.-685: 	let bigAdd l1 l2 =
//│ ║          	              ^^^^
//│ ║  l.-684: 	  let add (l1,l2) = ...
//│ ║          	^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?a -> ?b`
//│ ║  l.8: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║       	                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this variable has type `?c * ?d`
//│ ║  l.5: 	  let f a x =
//│ ║       	        ^
//│ ╟── this reference has type `?c * ?d`
//│ ║  l.7: 	    let (carry,res) = a in
//│ ║       	                      ^
//│ ╟── this pattern has type `?c * ?d`
//│ ║  l.7: 	    let (carry,res) = a in
//│ ╙──     	        ^^^^^^^^^^^
//│ ╔══[ERROR] Type `?a list` does not match `?b * ?c`
//│ ║  
//│ ╟── this reference has type `?a list`
//│ ║  l.8: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║       	                          ^^
//│ ╟── this match expression has type `?a list`
//│ ║  l.8: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║       	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?b * ?c`
//│ ║  l.11: 	  let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ ║        	                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this pattern has type `?b * ?c`
//│ ║  l.11: 	  let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ ╙──      	      ^^^^^^^^^^^
//│ ╔══[ERROR] Type `?b -> ?c` does not match `?a list`
//│ ║  
//│ ╟──        ?b -> ?c ---> ?d <--- ?a list 
//│ ║  
//│ ╟── this function has type `?b -> ?c`
//│ ║  l.-685: 	let bigAdd l1 l2 =
//│ ║          	              ^^^^
//│ ║  l.-684: 	  let add (l1,l2) = ...
//│ ║          	^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?b -> ?c` and it flows into `?d`
//│ ║  l.8: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║       	                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this match expression has type `?d`
//│ ║  l.8: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║       	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this reference has type `?a list` and it flows into `?d`
//│ ║  l.8: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ╙──     	                          ^^
//│ ╔══[ERROR] Type `?a list` does not match `?b * ?c`
//│ ║  
//│ ╟── this reference has type `?a list`
//│ ║  l.8: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║       	                          ^^
//│ ╟── this match expression has type `?a list`
//│ ║  l.8: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║       	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this variable has type `?b * ?c`
//│ ║  l.5: 	  let f a x =
//│ ║       	        ^
//│ ╟── this reference has type `?b * ?c`
//│ ║  l.7: 	    let (carry,res) = a in
//│ ║       	                      ^
//│ ╟── this pattern has type `?b * ?c`
//│ ║  l.7: 	    let (carry,res) = a in
//│ ╙──     	        ^^^^^^^^^^^
//│ ╔══[ERROR] Type `?a list` does not match `int * ?a0 list`
//│ ║  
//│ ╟──        ?a list ---> ?b <--- int * ?a0 list 
//│ ║  
//│ ╟── this reference has type `?a list`
//│ ║  l.8: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║       	                          ^^
//│ ╟── this match expression has type `?a list`
//│ ║  l.8: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║       	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this let expression has type `?a list`
//│ ║  l.7: 	    let (carry,res) = a in
//│ ║       	    ^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.8: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this let expression has type `?a list` and it flows into `?b`
//│ ║  l.6: 	    let (x1,x2) = x in
//│ ║       	    ^^^^^^^^^^^^^^^^^^
//│ ║  l.7: 	    let (carry,res) = a in ...
//│ ║       	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?b`
//│ ║  l.11: 	  let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ ║        	                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this reference has type `?b` and it flows from `int * ?a0 list`
//│ ║  l.11: 	  let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ ║        	                                     ^^^^
//│ ╟── this tuple literal has type `int * ?a0 list`
//│ ║  l.9: 	  let base = (0, []) in
//│ ╙──     	             ^^^^^^^
//│ ╔══[ERROR] Type `?b -> ?c` does not match `int * ?a list`
//│ ║  
//│ ╟──        ?b -> ?c ---> ?d <--- int * ?a list 
//│ ║  
//│ ╟── this function has type `?b -> ?c`
//│ ║  l.-685: 	let bigAdd l1 l2 =
//│ ║          	              ^^^^
//│ ║  l.-684: 	  let add (l1,l2) = ...
//│ ║          	^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?b -> ?c`
//│ ║  l.8: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║       	                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this match expression has type `?b -> ?c`
//│ ║  l.8: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║       	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this let expression has type `?b -> ?c`
//│ ║  l.7: 	    let (carry,res) = a in
//│ ║       	    ^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.8: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this let expression has type `?b -> ?c` and it flows into `?d`
//│ ║  l.6: 	    let (x1,x2) = x in
//│ ║       	    ^^^^^^^^^^^^^^^^^^
//│ ║  l.7: 	    let (carry,res) = a in ...
//│ ║       	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?d`
//│ ║  l.11: 	  let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ ║        	                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this reference has type `?d` and it flows from `int * ?a list`
//│ ║  l.11: 	  let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ ║        	                                     ^^^^
//│ ╟── this tuple literal has type `int * ?a list`
//│ ║  l.9: 	  let base = (0, []) in
//│ ╙──     	             ^^^^^^^
//│ ╔══[ERROR] Type `?a list` does not match `?b -> ?c`
//│ ║  
//│ ╟── this reference has type `?a list`
//│ ║  l.-100: 	  | h::t -> [remainder x y] @ (mulByDigit i t);;
//│ ║          	                                            ^
//│ ╟── this variable has type `?a list`
//│ ║  l.-103: 	let rec mulByDigit i l =
//│ ║          	                     ^
//│ ╟── this variable has type `?b -> ?c`
//│ ║  l.4: 	let bigMul l1 l2 =
//│ ║       	           ^^
//│ ╟── this reference has type `?b -> ?c`
//│ ║  l.10: 	  let args = l1 (tenEx 0 l2) in
//│ ╙──      	             ^^
//│ ╔══[ERROR] Type `?a list` does not match `?b * ?c`
//│ ║  
//│ ╟── `?a list` comes from this type expression
//│ ║  builtin: 	let (@): 'a list -> 'a list -> 'a list
//│ ║           	                               ^^^^^^^
//│ ╟── this operator application has type `?a list`
//│ ║  l.-689: 	  then (((clone 0 (-1 * diff)) @ l1), l2)
//│ ║          	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this variable has type `?b * ?c`
//│ ║  l.-684: 	  let add (l1,l2) =
//│ ║          	           ^^
//│ ╟── this reference has type `?b * ?c`
//│ ║  l.-688: 	  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ ║          	                                                          ^^
//│ ╟── this variable has type `?b * ?c`
//│ ║  l.-692: 	let padZero l1 l2 =
//│ ║          	            ^^
//│ ╟── this reference has type `?b * ?c`
//│ ║  l.-679: 	  removeZero (add (padZero l1 l2));;
//│ ║          	                           ^^
//│ ╟── this variable has type `?b * ?c`
//│ ║  l.-685: 	let bigAdd l1 l2 =
//│ ║          	           ^^
//│ ╟── this tuple literal has type `?b * ?c`
//│ ║  l.8: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ╙──     	                                              ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `?a list` does not match `?b * ?c`
//│ ║  
//│ ╟──        ?a list ---> ?d <--- ?b * ?c 
//│ ║  
//│ ╟── `?a list` comes from this type expression
//│ ║  builtin: 	let (@): 'a list -> 'a list -> 'a list
//│ ║           	                               ^^^^^^^
//│ ╟── this operator application has type `?a list` and it flows into `?d`
//│ ║  l.-689: 	  then (((clone 0 (-1 * diff)) @ l1), l2)
//│ ║          	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this 0 element of this tuple has type `?d`
//│ ║  l.-680: 	    let (_,res) = List.fold_left f base args in res in
//│ ║          	        ^^^^^^^
//│ ╟── this reference has type `?d`
//│ ║  l.-688: 	  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ ║          	                                                          ^^
//│ ╟── this variable has type `?d`
//│ ║  l.-692: 	let padZero l1 l2 =
//│ ║          	            ^^
//│ ╟── this reference has type `?d`
//│ ║  l.-683: 	    let f a x = padZero l1 l2 in
//│ ║          	                        ^^
//│ ╟── this variable has type `?d`
//│ ║  l.-684: 	  let add (l1,l2) =
//│ ║          	           ^^
//│ ╟── this reference has type `?d`
//│ ║  l.-688: 	  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ ║          	                                                          ^^
//│ ╟── this variable has type `?d`
//│ ║  l.-692: 	let padZero l1 l2 =
//│ ║          	            ^^
//│ ╟── this reference has type `?d`
//│ ║  l.-679: 	  removeZero (add (padZero l1 l2));;
//│ ║          	                           ^^
//│ ╟── this variable has type `?d` and it flows from `?b * ?c`
//│ ║  l.-685: 	let bigAdd l1 l2 =
//│ ║          	           ^^
//│ ╟── this tuple literal has type `?b * ?c`
//│ ║  l.8: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ╙──     	                                              ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `?a * ?b` does not match `?c list`
//│ ║  
//│ ╟── this tuple literal has type `?a * ?b`
//│ ║  l.8: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║       	                                              ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this variable has type `?a * ?b`
//│ ║  l.-685: 	let bigAdd l1 l2 =
//│ ║          	           ^^
//│ ╟── this reference has type `?a * ?b`
//│ ║  l.-679: 	  removeZero (add (padZero l1 l2));;
//│ ║          	                           ^^
//│ ╟── this variable has type `?a * ?b`
//│ ║  l.-692: 	let padZero l1 l2 =
//│ ║          	            ^^
//│ ╟── this reference has type `?a * ?b`
//│ ║  l.-688: 	  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ ║          	                                                          ^^
//│ ╟── this variable has type `?a * ?b`
//│ ║  l.-684: 	  let add (l1,l2) =
//│ ║          	           ^^
//│ ╟── this variable has type `?c list`
//│ ║  l.-684: 	  let add (l1,l2) =
//│ ║          	           ^^
//│ ╟── this reference has type `?c list`
//│ ║  l.-682: 	    let base = List.combine l1 l2 in
//│ ║          	                            ^^
//│ ╟── `?c list` comes from this type expression
//│ ║  builtin: 	let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ ╙──         	                  ^^^^^^^
//│ ╔══[ERROR] Type `?a * ?b` does not match `?c list`
//│ ║  
//│ ╟── this tuple literal has type `?a * ?b`
//│ ║  l.8: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║       	                                              ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this variable has type `?a * ?b`
//│ ║  l.-685: 	let bigAdd l1 l2 =
//│ ║          	           ^^
//│ ╟── this reference has type `?a * ?b`
//│ ║  l.-679: 	  removeZero (add (padZero l1 l2));;
//│ ║          	                           ^^
//│ ╟── this variable has type `?a * ?b`
//│ ║  l.-692: 	let padZero l1 l2 =
//│ ║          	            ^^
//│ ╟── this reference has type `?a * ?b`
//│ ║  l.-688: 	  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ ║          	                                                          ^^
//│ ╟── this variable has type `?a * ?b`
//│ ║  l.-684: 	  let add (l1,l2) =
//│ ║          	           ^^
//│ ╟── this variable has type `?c list`
//│ ║  l.-684: 	  let add (l1,l2) =
//│ ║          	           ^^
//│ ╟── this reference has type `?c list`
//│ ║  l.-683: 	    let f a x = padZero l1 l2 in
//│ ║          	                        ^^
//│ ╟── this variable has type `?c list`
//│ ║  l.-692: 	let padZero l1 l2 =
//│ ║          	            ^^
//│ ╟── this reference has type `?c list`
//│ ║  l.-691: 	  let diff = (List.length l1) - (List.length l2) in
//│ ║          	                          ^^
//│ ╟── `?c list` comes from this type expression
//│ ║  builtin: 	let List.length: 'a list -> int
//│ ╙──         	                 ^^^^^^^
//│ ╔══[ERROR] Type `?a * ?b` does not match `?c list`
//│ ║  
//│ ╟── this tuple literal has type `?a * ?b`
//│ ║  l.8: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║       	                                              ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this variable has type `?a * ?b`
//│ ║  l.-685: 	let bigAdd l1 l2 =
//│ ║          	           ^^
//│ ╟── this reference has type `?a * ?b`
//│ ║  l.-679: 	  removeZero (add (padZero l1 l2));;
//│ ║          	                           ^^
//│ ╟── this variable has type `?a * ?b`
//│ ║  l.-692: 	let padZero l1 l2 =
//│ ║          	            ^^
//│ ╟── this variable has type `?c list`
//│ ║  l.-692: 	let padZero l1 l2 =
//│ ║          	            ^^
//│ ╟── this reference has type `?c list`
//│ ║  l.-691: 	  let diff = (List.length l1) - (List.length l2) in
//│ ║          	                          ^^
//│ ╟── `?c list` comes from this type expression
//│ ║  builtin: 	let List.length: 'a list -> int
//│ ╙──         	                 ^^^^^^^
//│ ╔══[ERROR] Type `?a list` does not match `?b -> ?c`
//│ ║  
//│ ╟──        ?a list <--- ?d ---> ?b -> ?c 
//│ ║  
//│ ╟── `?a list` comes from this type expression
//│ ║  builtin: 	let List.rev: 'a list -> 'a list
//│ ║           	              ^^^^^^^
//│ ╟── this reference has type `?a list`
//│ ║  l.-102: 	  match List.rev l with
//│ ║          	                 ^
//│ ╟── this variable has type `?a list`
//│ ║  l.-103: 	let rec mulByDigit i l =
//│ ║          	                     ^
//│ ╟── this reference has type `?a list` and it flows from `?d`
//│ ║  l.8: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║       	                                                             ^^
//│ ╟── this variable has type `?d`
//│ ║  l.4: 	let bigMul l1 l2 =
//│ ║       	           ^^
//│ ╟── this reference has type `?d` and it flows into `?b -> ?c`
//│ ║  l.10: 	  let args = l1 (tenEx 0 l2) in
//│ ╙──      	             ^^
//│ helper: int -> int
//│ tenEx: int -> list[int] -> list[int]
//│ bigMul: nothing -> list[int] -> list[int]

// file 335
let fixpointHelper f =
  match f with | (num,expr) -> if expr then (num, true) else (num, false);;
let rec wwhile (f,b) =
  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
let fixpoint (f,b) = wwhile ((fixpointHelper f), b);;
//│ ╔══[ERROR] Type `?a * bool` does not match `?b -> ?c`
//│ ║  
//│ ╟── this tuple literal has type `?a * bool`
//│ ║  l.2: 	  match f with | (num,expr) -> if expr then (num, true) else (num, false);;
//│ ║       	                                                             ^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?a * bool`
//│ ║  l.2: 	  match f with | (num,expr) -> if expr then (num, true) else (num, false);;
//│ ║       	                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this let expression has type `?b -> ?c`
//│ ║  l.2: 	  match f with | (num,expr) -> if expr then (num, true) else (num, false);;
//│ ║       	  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?b -> ?c`
//│ ║  l.5: 	let fixpoint (f,b) = wwhile ((fixpointHelper f), b);;
//│ ║       	                             ^^^^^^^^^^^^^^^^^^
//│ ╟── this variable has type `?b -> ?c`
//│ ║  l.3: 	let rec wwhile (f,b) =
//│ ║       	                ^
//│ ╟── this reference has type `?b -> ?c`
//│ ║  l.4: 	  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│ ╙──     	        ^
//│ fixpointHelper: ('a, bool,) -> ('a, bool,)
//│ wwhile: (('a | 'b) -> ('a & 'b & 'c & 'd, bool,), 'a,) -> 'c
//│   where
//│     'b <: 'c & 'd
//│     'c :> 'b | 'd
//│        <: 'b & 'd
//│     'd :> 'b | 'c
//│        <: 'b & 'c
//│ fixpoint: ((anything, bool,), anything,) -> nothing

// file 3 mod
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;
let padZero l1 l2 =
  let numZeros = (List.length l1) - (List.length l2) in
  let absNumZeros = abs numZeros in
  if numZeros = 0
  then (l1, l2)
  else
    (let listZeros = clone 0 absNumZeros in
     if numZeros > 0 then (l1, (listZeros @ l2)) else ((listZeros @ l1), l2));;
let rec removeZero l =
  match l with | [] -> [] | 0::t -> removeZero t | h::t -> l;;
let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (carry,currentSum) = a in
      if x = []
      then (0, (carry :: currentSum))
      else
        (let (toSum1,toSum2) = x in
         let intermediateValue = (toSum1 + toSum2) + carry in
         let valueToAddToArray = intermediateValue mod 10 in
         let carry = intermediateValue / 10 in
         (carry, (valueToAddToArray :: currentSum))) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;
//│ ╔══[ERROR] Type `int` does not match `(int -> int -> int) -> ?a`
//│ ║  
//│ ╟── `int` comes from this type expression
//│ ║  builtin: 	let (+): int -> int -> int
//│ ║           	                       ^^^
//│ ╟── this operator application has type `int`
//│ ║  l.20: 	         let intermediateValue = (toSum1 + toSum2) + carry in
//│ ║        	                                 ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this operator application has type `(int -> int -> int) -> ?a`
//│ ║  l.20: 	         let intermediateValue = (toSum1 + toSum2) + carry in
//│ ║        	                                 ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this reference has type `(int -> int -> int) -> ?a`
//│ ║  l.21: 	         let valueToAddToArray = intermediateValue mod 10 in
//│ ╙──      	                                 ^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `?b * ?c` does not match `?a list`
//│ ║  
//│ ╟── `?b * ?c` comes from this type expression
//│ ║  builtin: 	let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ ║           	                                         ^^^^^^^
//│ ╟── this reference has type `?a list`
//│ ║  l.16: 	      if x = []
//│ ╙──      	             ^^
//│ ╔══[ERROR] Type `?b * ?c` does not match `?a list`
//│ ║  
//│ ╟──        ?b * ?c <--- ?d ---> ?a list 
//│ ║  
//│ ╟── this pattern has type `?b * ?c`
//│ ║  l.19: 	        (let (toSum1,toSum2) = x in
//│ ║        	             ^^^^^^^^^^^^^^^
//│ ╟── this reference has type `?b * ?c` and it flows from `?d`
//│ ║  l.19: 	        (let (toSum1,toSum2) = x in
//│ ║        	                               ^
//│ ╟── this variable has type `?d`
//│ ║  l.14: 	    let f a x =
//│ ║        	            ^
//│ ╟── this reference has type `?d` and it flows into `?a list`
//│ ║  l.16: 	      if x = []
//│ ║        	         ^
//│ ╟── this reference has type `?a list`
//│ ║  l.16: 	      if x = []
//│ ╙──      	             ^^
//│ clone: 'a -> int -> list['a]
//│ padZero: (list['a] & 'b) -> (list['c] & 'd) -> (list[int | 'a] | 'b, list[int | 'c] | 'd,)
//│ removeZero: (list[int] & 'a & 'b) -> 'a
//│   where
//│     'a := 'b
//│     'b := 'a
//│ bigAdd: list[int] -> list[int] -> list[int]

// file 1935
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;
let addTuple (l1,l2) = l1 + l2;;
let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
  else
    if (List.length l1) < (List.length l2)
    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2)
    else (l1, l2);;
let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;
let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x = (a + x) mod 10 in
    let base = 0 in
    let args = List.map addTuple (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;
//│ ╔══[ERROR] Type `int` does not match `?a * ?b`
//│ ║  
//│ ╟── this integer literal has type `int`
//│ ║  l.15: 	    let base = 0 in
//│ ║        	               ^
//│ ╟── this reference has type `int`
//│ ║  l.17: 	    let (_,res) = List.fold_left f base args in res in
//│ ║        	                                   ^^^^
//│ ╟── this application has type `int`
//│ ║  l.17: 	    let (_,res) = List.fold_left f base args in res in
//│ ║        	                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?a * ?b`
//│ ║  l.17: 	    let (_,res) = List.fold_left f base args in res in
//│ ║        	                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this pattern has type `?a * ?b`
//│ ║  l.17: 	    let (_,res) = List.fold_left f base args in res in
//│ ╙──      	        ^^^^^^^
//│ ╔══[ERROR] Type `int` does not match `(int -> int -> int) -> ?a`
//│ ║  
//│ ╟── `int` comes from this type expression
//│ ║  builtin: 	let (+): int -> int -> int
//│ ║           	                       ^^^
//│ ╟── this operator application has type `int`
//│ ║  l.14: 	    let f a x = (a + x) mod 10 in
//│ ║        	                ^^^^^^^
//│ ╟── this operator application has type `(int -> int -> int) -> ?a`
//│ ║  l.14: 	    let f a x = (a + x) mod 10 in
//│ ╙──      	                ^^^^^^^
//│ clone: 'a -> int -> list['a]
//│ addTuple: (int, int,) -> int
//│ padZero: (list['a] & 'b) -> (list['c] & 'd) -> (list[int | 'a] | 'b, list[int | 'c] | 'd,)
//│ removeZero: list['a] -> list['a]
//│ bigAdd: list[int] -> list[int] -> list[nothing]



// file 1907
let intboolf f x = ((f x), ((f x) < 1));;
let fixpoint (f,b) = wwhile (intboolf, b);;
let rec wwhile (f,b) =
  match f b with | (b',c') -> if c' then wwhile (f, b') else b';;
//│ ╔══[ERROR] Type `?a -> ?b * ?c` does not match `?d * ?e`
//│ ║  
//│ ╟── this function has type `?a -> ?b * ?c`
//│ ║  l.1: 	let intboolf f x = ((f x), ((f x) < 1));;
//│ ║       	               ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?a -> ?b * ?c`
//│ ║  l.-164: 	  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│ ║          	        ^^^
//│ ╟── this application has type `?d * ?e`
//│ ║  l.-164: 	  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│ ║          	        ^^^
//│ ╟── this pattern has type `?d * ?e`
//│ ║  l.-164: 	  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│ ╙──        	                   ^^^^^^^^^^
//│ intboolf: ('a -> 'b) -> 'a -> ('b, bool,)
//│ fixpoint: (anything, nothing -> anything,) -> nothing
//│ wwhile: (('a | 'b) -> ('a & 'b & 'c & 'd, bool,), 'a,) -> 'c
//│   where
//│     'b <: 'c & 'd
//│     'c :> 'b | 'd
//│        <: 'b & 'd
//│     'd :> 'b | 'c
//│        <: 'b & 'c



// file 2047
let identity a = a;;
let pipe fs =
  let f a x = a x in let base = identity in List.fold_left f base fs;;
//│ identity: 'a -> 'a
//│ pipe: list['a & 'b & 'c & 'd & 'e] -> ('a | 'b | 'c | 'e)
//│   where
//│     'a :> ('a & 'b & 'd & 'e) -> ('b | 'c) | 'b | 'c | 'e
//│        <: 'd
//│     'd <: 'c -> 'e
//│     'e :> 'b | 'c
//│        <: 'a & 'd


// file 830
// TODO: fix how match case is done
let modulus ss = ss mod 10;;
let rec digitsOfInt n =
  if n <= 0
  then []
  else (match n with | x -> (digitsOfInt (n / 10)) @ [modulus x]);;
let lt10 q = q < 10;;
let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
let rec additivePersistence n =
  if lt10 n
  then n
  else
    (match n with
     | n -> let x_ = digitsOfInt n in sumList x_ additivePersistence n);;
//│ /!!!\ Uncaught error: java.lang.Exception: Internal Error: could not find type definition x


// FIXME investigate
// file 1770 (TODO fix nested flows)
let rec filter l a =
  match l with
  | [] -> []
  | h::t -> if a = h then filter t a else h :: (filter t a);;
let removeDuplicates l =
  let rec helper (seen,rest) =
    match rest with
    | [] -> seen
    | h::t ->
        let seen' = h in
        let rest' = h :: (filter (t h)) in helper (seen', rest') in
  List.rev (helper ([], l));;
//│ ╔══[ERROR] Type `?b -> ?c` does not match `?a list`
//│ ║  
//│ ╟── this function has type `?b -> ?c`
//│ ║  l.1: 	let rec filter l a =
//│ ║       	                 ^^^
//│ ║  l.2: 	  match l with ...
//│ ║       	^^^^^^^^^^^^^^
//│ ╟── this application has type `?b -> ?c`
//│ ║  l.11: 	        let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│ ║        	                         ^^^^^^^^^^^^^^
//│ ╟── this application has type `?a list`
//│ ║  l.11: 	        let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│ ╙──      	                         ^^^^^^^^^^^^^^
//│ filter: list['a] -> anything -> list['a]
//│ removeDuplicates: list[list['a]] -> list['a]


// file 0221
let fu x b = (x, (b < (x b)));;
let rec wwhile (f,b) =
  let temp = f b in
  match temp with | (a,boolean) -> if boolean then wwhile (f, a) else a;;
let fixpoint (f,b) = wwhile ((fu f), b);;
//│ fu: ('a -> anything & 'b) -> 'a -> ('b, bool,)
//│ wwhile: (('a | 'b) -> ('a & 'b & 'c & 'd, bool,), 'a,) -> 'c
//│   where
//│     'b <: 'c & 'd
//│     'c :> 'b | 'd
//│        <: 'b & 'd
//│     'd :> 'b | 'c
//│        <: 'b & 'c
//│ fixpoint: (('a | 'b) -> anything & 'a & 'b & 'c & 'd, 'a,) -> ('d | 'b)
//│   where
//│     'b <: 'c & 'd
//│     'c :> 'd | 'b
//│        <: 'b & 'd
//│     'd :> 'c | 'b
//│        <: 'b & 'c

// file 2338
:unify
let rec assoc (d,k,l) =
  match l with
  | [] -> d
  | h::t -> let (f,s) = h in if k = f then s h else assoc d k t;;
//│ ╔══[ERROR] Type `?a -> ?b` does not match `?c * ?a * ?d`
//│ ║  
//│ ╟──        ?a -> ?b <--- ?c ---> ?c * ?a * ?d 
//│ ║  
//│ ╟── this application has type `?a -> ?b`
//│ ║  l.4: 	  | h::t -> let (f,s) = h in if k = f then s h else assoc d k t;;
//│ ║       	                                                    ^^^^^^^
//│ ╟── this match expression has type `?a -> ?b`
//│ ║  l.2: 	  match l with
//│ ║       	  ^^^^^^^^^^^^
//│ ║  l.3: 	  | [] -> d ...
//│ ║       	^^^^^^^^^^^
//│ ╟── this reference has type `?a -> ?b` and it flows from `?c`
//│ ║  l.3: 	  | [] -> d
//│ ║       	          ^
//│ ╟── this variable has type `?c`
//│ ║  l.1: 	let rec assoc (d,k,l) =
//│ ║       	               ^
//│ ╟── this reference has type `?c` and it flows into `?c * ?a * ?d`
//│ ║  l.4: 	  | h::t -> let (f,s) = h in if k = f then s h else assoc d k t;;
//│ ║       	                                                          ^
//│ ╟── this tuple literal has type `?c * ?a * ?d`
//│ ║  l.1: 	let rec assoc (d,k,l) =
//│ ╙──     	              ^^^^^^^
//│ assoc: ('b, 'c, list[(anything, 'a -> ('d & 'e & 'f & 'g),) & 'a],) -> 'e
//│   where
//│     'b <: ('b, 'c, list[(anything, 'a -> ('d & 'e & 'f & 'g),) & 'a],) & 'd & 'e
//│     'd <: 'c -> list['a] -> 'h
//│     'h <: 'd & 'e & 'f & 'g
//│     'e :> 'b | 'f | 'g
//│        <: 'd
//│     'f :> 'g
//│        <: 'd & 'e
//│     'g :> 'h
//│        <: 'd & 'e & 'f


