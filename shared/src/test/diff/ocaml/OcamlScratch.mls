let wrap x = x :: []
//│ ╔══[ERROR] Type `?b * ?a list` does not match `?a0 * ?a0 list`
//│ ║  
//│ ╟── this tuple has type `?b * ?a list`
//│ ║  l.1: 	let wrap x = x :: []
//│ ╙──     	             ^
//│ wrap: 'a -> list['a]


// *** GOAL ***
// ╔══[WARNING] Type `int` does not match `bool`
// ╟── int ---> int list ---> ?a <--- bool list <--- bool
// ╟── integer literal `int`
// ║  l.101: 	if true then wrap 1 else wrap true
// ║         	                  ^
// ╟── integer literal `int`
// ║  l.101: 	if true then wrap 1 else wrap true
// ║         	                  ^
// ╟── argument `int`
// ║  l.101: 	if true then wrap 1 else wrap true
// ║         	                  ^
// ╟── reference `int`
// ║  l.97: 	let wrap x = Cons(x, Nil)
// ║        	                  ^
// ╟── argument `bool`
// ║  l.101: 	if true then wrap 1 else wrap true
// ║         	                              ^^^^
// ╟── reference `bool`
// ║  l.101: 	if true then wrap 1 else wrap true
// ╙──       	                              ^^^^

// * We don't care about in-and-outs
// ╟── int ---> int list ---> int --> int list ---> ...


if true then wrap 1 else wrap true
//│ res: list[bool | int]


:unify
if true then wrap (if true then 1 else false) else wrap true
//│ ╔══[ERROR] Type `int` does not match `bool`
//│ ║  
//│ ╟──        int ---> ?a <--- bool 
//│ ║  
//│ ╟── this `then` branch has type `int` and it flows into `?a`
//│ ║  l.1: 	if true then wrap (if true then 1 else false) else wrap true
//│ ║       	                                ^
//│ ╟── this if-then-else expression has type `?a`
//│ ║  l.1: 	if true then wrap (if true then 1 else false) else wrap true
//│ ║       	                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this `else` branch has type `bool` and it flows into `?a`
//│ ║  l.1: 	if true then wrap (if true then 1 else false) else wrap true
//│ ╙──     	                                       ^^^^^
//│ res: list[bool | int]


:unify
let test z = if true then wrap z else wrap true
//│ test: 'a -> list[bool | 'a]


// FIXME: prov missing
:unify
let rec t = test (if true then 1 else t)
//│ ╔══[ERROR] Type `?a list` does not match `int`
//│ ║  
//│ ╟──        ?a list ---> ?b <--- int 
//│ ║  
//│ ╟── this application has type `?a list`
//│ ║  l.-63: 	let wrap x = x :: []
//│ ║         	             ^^^^^^^
//│ ╟── this `else` branch has type `?a list`
//│ ║  l.-5: 	let test z = if true then wrap z else wrap true
//│ ║        	                                      ^^^^^^^^^
//│ ╟── this if-then-else expression has type `?a list`
//│ ║  l.-5: 	let test z = if true then wrap z else wrap true
//│ ║        	             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?a list`
//│ ║  l.1: 	let rec t = test (if true then 1 else t)
//│ ║       	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this recursive binding has type `?a list`
//│ ║  l.1: 	let rec t = test (if true then 1 else t)
//│ ║       	        ^
//│ ╟── this `else` branch has type `?a list` and it flows into `?b`
//│ ║  l.1: 	let rec t = test (if true then 1 else t)
//│ ║       	                                      ^
//│ ╟── this if-then-else expression has type `?b`
//│ ║  l.1: 	let rec t = test (if true then 1 else t)
//│ ║       	                 ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this `then` branch has type `int` and it flows into `?b`
//│ ║  l.1: 	let rec t = test (if true then 1 else t)
//│ ╙──     	                               ^
//│ ╔══[ERROR] Type `?a list` does not match `int`
//│ ║  
//│ ╟──        ?a list ---> ?b <--- int 
//│ ║  
//│ ╟── this application has type `?a list`
//│ ║  l.-63: 	let wrap x = x :: []
//│ ║         	             ^^^^^^^
//│ ╟── this `then` branch has type `?a list`
//│ ║  l.-5: 	let test z = if true then wrap z else wrap true
//│ ║        	                          ^^^^^^
//│ ╟── this if-then-else expression has type `?a list`
//│ ║  l.-5: 	let test z = if true then wrap z else wrap true
//│ ║        	             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?a list`
//│ ║  l.1: 	let rec t = test (if true then 1 else t)
//│ ║       	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this recursive binding has type `?a list`
//│ ║  l.1: 	let rec t = test (if true then 1 else t)
//│ ║       	        ^
//│ ╟── this `else` branch has type `?a list` and it flows into `?b`
//│ ║  l.1: 	let rec t = test (if true then 1 else t)
//│ ║       	                                      ^
//│ ╟── this if-then-else expression has type `?b`
//│ ║  l.1: 	let rec t = test (if true then 1 else t)
//│ ║       	                 ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this `then` branch has type `int` and it flows into `?b`
//│ ║  l.1: 	let rec t = test (if true then 1 else t)
//│ ╙──     	                               ^
//│ t: 't
//│   where
//│     't :> list[int | 't | bool]




let wrap x = not x
//│ wrap: bool -> bool

:unify
let test z = wrap z
//│ test: bool -> bool


// FIXME show error
// test 1



:unify
let clone x n =
  let rec helper acc n' =
    if acc <= 0 then acc else helper (acc + 1) (n' - 1) in
  helper x (n - 1)
//│ clone: (int & 'a & 'b) -> int -> (int | 'b)
//│   where
//│     'a := 'b
//│     'b := 'a



// * Note the counter-intuitive jump from the outer to the inner expression,
// * which is in fact legit, as it's due to the recursion...
:e
:unify
let rec digitsOfInt n =
  ((digitsOfInt n) / 10) @ [remainder];;
//│ ╔══[ERROR] Type `error * ?a list` does not match `?a0 * ?a0 list`
//│ ║  
//│ ╟── this tuple has type `error * ?a list`
//│ ║  l.2: 	  ((digitsOfInt n) / 10) @ [remainder];;
//│ ╙──     	                            ^^^^^^^^^
//│ ╔══[ERROR] Type `int` does not match `?a list`
//│ ║  
//│ ╟── `int` comes from this type expression
//│ ║  builtin: 	let ( / ): int -> int -> int
//│ ║           	                         ^^^
//│ ╟── this operator application has type `int`
//│ ║  l.2: 	  ((digitsOfInt n) / 10) @ [remainder];;
//│ ║       	  ^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── `?a list` comes from this type expression
//│ ║  builtin: 	let (@): 'a list -> 'a list -> 'a list
//│ ╙──         	         ^^^^^^^
//│ ╔══[ERROR] identifier not found: remainder
//│ ║  
//│ ║  l.159: 	  ((digitsOfInt n) / 10) @ [remainder];;
//│ ╙──       	                            ^^^^^^^^^
//│ digitsOfInt: anything -> list[error]
