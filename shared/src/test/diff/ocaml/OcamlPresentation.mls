:unify
let boolToInt x = if x then "0" else 1
//│ ╔══[ERROR] Type `string` does not match `int`
//│ ║  
//│ ╟── this `then` branch has type `string`
//│ ║  l.1: 	let boolToInt x = if x then "0" else 1
//│ ║       	                            ^^^
//│ ╟── this if-then-else expression has type `string`
//│ ║  l.1: 	let boolToInt x = if x then "0" else 1
//│ ║       	                  ^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `int`
//│ ║  l.1: 	let boolToInt x = if x then "0" else 1
//│ ║       	                  ^^^^^^^^^^^^^^^^^^^^
//│ ╟── this `else` branch has type `int`
//│ ║  l.1: 	let boolToInt x = if x then "0" else 1
//│ ╙──     	                                     ^
//│ boolToInt: bool -> (int | string)

type ('a, 'b) either = Left of 'a | Right of 'b
//│ ╔══[ERROR] Type 'either' is already defined.
//│ ║  
//│ ║  l.19: 	type ('a, 'b) either = Left of 'a | Right of 'b
//│ ╙──      	              ^^^^^^
//│ ╔══[ERROR] Type 'Left' is already defined.
//│ ║  
//│ ║  l.19: 	type ('a, 'b) either = Left of 'a | Right of 'b
//│ ╙──      	                       ^^^^
//│ ╔══[ERROR] Type 'Right' is already defined.
//│ ║  
//│ ║  l.19: 	type ('a, 'b) either = Left of 'a | Right of 'b
//│ ╙──      	                                    ^^^^^
//│ Left: 'a -> either['a, nothing]
//│ Right: 'a -> either[nothing, 'a]

:e
Left 1 : int
//│ ╔══[ERROR] Type `(?a, ?b) either` does not match `int`
//│ ║  
//│ ╟── `(?a, ?b) either` comes from this type expression
//│ ║  l.-16: 	type ('a, 'b) either = Left of 'a | Right of 'b
//│ ║         	                       ^^^^^^^^^^
//│ ╟── this application has type `(?a, ?b) either`
//│ ║  l.1: 	Left 1 : int
//│ ║       	^^^^^^
//│ ╟── this application has type `int`
//│ ║  l.1: 	Left 1 : int
//│ ║       	^^^^^^
//│ ╟── `int` comes from this type expression
//│ ║  l.1: 	Left 1 : int
//│ ╙──     	         ^^^
//│ res: int

// TODO add Left definition location to pattern type
:unify
let destructEither x = match x with
 | Left l -> l + 1
 | Right r -> r && true
//│ ╔══[ERROR] Type `int` does not match `bool`
//│ ║  
//│ ╟──        int ---> ?a <--- bool 
//│ ║  
//│ ╟── `int` comes from this type expression and it flows into `?a`
//│ ║  builtin: 	let (+): int -> int -> int
//│ ║           	                       ^^^
//│ ╟── this operator application has type `?a`
//│ ║  l.2: 	 | Left l -> l + 1
//│ ║       	             ^^^^^
//│ ╟── this match expression has type `?b`
//│ ║  l.1: 	let destructEither x = match x with
//│ ║       	                       ^^^^^^^^^^^^
//│ ║  l.2: 	 | Left l -> l + 1 ...
//│ ║       	^^^^^^^^^^^^^^^^^^
//│ ╟── this operator application has type `?b` and it flows from `bool`
//│ ║  l.3: 	 | Right r -> r && true
//│ ║       	              ^^^^^^^^^^
//│ ╟── this type reference has type `bool`
//│ ║  builtin: 	let (&&): bool -> bool -> bool
//│ ╙──         	                          ^^^^
//│ destructEither: either[int, bool] -> (bool | int)

:unify // TODO unnecessary errors reported
let destructEither x = if x then
  match x with
   | Left l -> l + 1
   | Right r -> r && true
  else x
//│ ╔══[ERROR] Type `bool` does not match `int`
//│ ║  
//│ ╟──        bool ---> ?a <--- int 
//│ ║  
//│ ╟── `bool` comes from this type expression and it flows into `?a`
//│ ║  builtin: 	let (&&): bool -> bool -> bool
//│ ║           	                          ^^^^
//│ ╟── this operator application has type `?a`
//│ ║  l.4: 	   | Right r -> r && true
//│ ║       	                ^^^^^^^^^
//│ ╟── this match expression has type `?b`
//│ ║  l.2: 	  match x with
//│ ║       	  ^^^^^^^^^^^^
//│ ║  l.3: 	   | Left l -> l + 1 ...
//│ ║       	^^^^^^^^^^^^^^^^^^^^
//│ ╟── this operator application has type `?b` and it flows from `int`
//│ ║  l.3: 	   | Left l -> l + 1
//│ ║       	               ^^^^^
//│ ╟── this type reference has type `int`
//│ ║  builtin: 	let (+): int -> int -> int
//│ ╙──         	                       ^^^
//│ ╔══[ERROR] Type `bool` does not match `(?a, ?b) either`
//│ ║  
//│ ╟── `bool` comes from this type expression
//│ ║  builtin: 	let (&&): bool -> bool -> bool
//│ ║           	                          ^^^^
//│ ╟── this operator application has type `bool`
//│ ║  l.4: 	   | Right r -> r && true
//│ ║       	                ^^^^^^^^^
//│ ╟── this variable has type `(?a, ?b) either`
//│ ║  l.1: 	let destructEither x = if x then
//│ ║       	                   ^
//│ ╟── this reference has type `(?a, ?b) either`
//│ ║  l.2: 	  match x with
//│ ║       	        ^
//│ ╟── this pattern has type `(?a, ?b) either`
//│ ║  l.3: 	   | Left l -> l + 1
//│ ╙──     	     ^^^^
//│ ╔══[ERROR] Type `int` does not match `(?a, ?b) either`
//│ ║  
//│ ╟── `int` comes from this type expression
//│ ║  builtin: 	let (+): int -> int -> int
//│ ║           	                       ^^^
//│ ╟── this operator application has type `int`
//│ ║  l.3: 	   | Left l -> l + 1
//│ ║       	               ^^^^^
//│ ╟── this variable has type `(?a, ?b) either`
//│ ║  l.1: 	let destructEither x = if x then
//│ ║       	                   ^
//│ ╟── this reference has type `(?a, ?b) either`
//│ ║  l.2: 	  match x with
//│ ║       	        ^
//│ ╟── this pattern has type `(?a, ?b) either`
//│ ║  l.3: 	   | Left l -> l + 1
//│ ╙──     	     ^^^^
//│ destructEither: bool -> (bool | int)

let succ: int -> int
//│ succ: int -> int

:unify
let test2 x = match x with
 | true -> succ x
//│ ╔══[ERROR] Type `bool` does not match `int`
//│ ║  
//│ ╟──        bool <--- ?a ---> int 
//│ ║  
//│ ╟── this pattern has type `bool`
//│ ║  l.2: 	 | true -> succ x
//│ ║       	   ^^^^
//│ ╟── this reference has type `bool` and it flows from `?a`
//│ ║  l.1: 	let test2 x = match x with
//│ ║       	                    ^
//│ ╟── this variable has type `?a`
//│ ║  l.1: 	let test2 x = match x with
//│ ║       	          ^
//│ ╟── this reference has type `?a` and it flows into `int`
//│ ║  l.2: 	 | true -> succ x
//│ ║       	                ^
//│ ╟── this type reference has type `int`
//│ ║  l.-3: 	let succ: int -> int
//│ ╙──      	          ^^^
//│ test2: nothing -> int

let x: int list
let y: string list
let f: string list -> unit
//│ x: list[int]
//│ y: list[string]
//│ f: list[string] -> unit

:unify
f x

:unify
if true then x else y
//│ res: list[int | string]
