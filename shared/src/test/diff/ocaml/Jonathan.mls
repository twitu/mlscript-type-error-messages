
:e
:unify
let h y = (not y, (if true then y else 5))
//│ h: (bool & 'a) -> (bool, int | 'a,)





:e
:unify
let h y = (not y, (if true then y else 5))
//│ h: (bool & 'a) -> (bool, int | 'a,)



:e
:unify
let confluence z = if true then z else 5
confluence true
//│ ╔══[ERROR] Type `bool` does not match `int`
//│ ║  
//│ ╟──        bool ---> ?a <--- int 
//│ ║  
//│ ╟── this reference has type `bool`
//│ ║  l.2: 	confluence true
//│ ║       	           ^^^^
//│ ╟── this variable has type `bool`
//│ ║  l.1: 	let confluence z = if true then z else 5
//│ ║       	               ^
//│ ╟── this `then` branch has type `bool` and it flows into `?a`
//│ ║  l.1: 	let confluence z = if true then z else 5
//│ ║       	                                ^
//│ ╟── this if-then-else expression has type `?a`
//│ ║  l.1: 	let confluence z = if true then z else 5
//│ ║       	                   ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this `else` branch has type `int` and it flows into `?a`
//│ ║  l.1: 	let confluence z = if true then z else 5
//│ ╙──     	                                       ^
//│ confluence: 'a -> (int | 'a)
//│ res: bool | int


let mkpair x y = (x, confluence y)
let conflict x = mkpair (not x) x
//│ mkpair: 'a -> 'b -> ('a, int | 'b,)
//│ conflict: (bool & 'a) -> (bool, int | 'a,)




:e
let rec digitsOfInt n =
  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10]
//│ ╔══[ERROR] Type `int * ?a list` does not match `?a0 * ?a0 list`
//│ ║  
//│ ╟── this tuple has type `int * ?a list`
//│ ║  l.2: 	  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10]
//│ ╙──     	                                                   ^^^^^^^^
//│ digitsOfInt: int -> list[int]

let rec addNumbs n = match n with | [] -> 0 | h::t -> h + (addNumbs t)
//│ addNumbs: list[int] -> int


:e
:tex
let digits n = digitsOfInt (abs n)
//│ digits: int -> list[int]

:e
let rec additivePersistence n =
  match digits n with
  | [] -> 0
  | h::t -> if (addNumbs (h :: t)) >= 10 then false else true
//│ ╔══[ERROR] Type `?a * ?a list` does not match `?a0 * ?a0 list`
//│ ║  
//│ ╟── this tuple has type `?a * ?a list`
//│ ║  l.4: 	  | h::t -> if (addNumbs (h :: t)) >= 10 then false else true
//│ ╙──     	                          ^^^^^^
//│ ╔══[ERROR] Type `bool` does not match `int`
//│ ║  
//│ ╟──        bool ---> ?a <--- int 
//│ ║  
//│ ╟── this `else` branch has type `bool`
//│ ║  l.4: 	  | h::t -> if (addNumbs (h :: t)) >= 10 then false else true
//│ ║       	                                                         ^^^^^
//│ ╟── this if-then-else expression has type `bool` and it flows into `?a`
//│ ║  l.4: 	  | h::t -> if (addNumbs (h :: t)) >= 10 then false else true
//│ ║       	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this match expression has type `?a`
//│ ║  l.2: 	  match digits n with
//│ ║       	  ^^^^^^^^^^^^^^^^^^^
//│ ║  l.3: 	  | [] -> 0 ...
//│ ║       	^^^^^^^^^^^
//│ ╟── this integer literal has type `int` and it flows into `?a`
//│ ║  l.3: 	  | [] -> 0
//│ ╙──     	          ^
//│ additivePersistence: int -> (bool | int)



