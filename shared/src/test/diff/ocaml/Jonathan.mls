
:e
:unify
let h y = (not y, (if true then y else 5))
//│ ╔══[ERROR] Type `int` does not match `bool`
//│ ║  
//│ ╟──        int ---> ?a <--- ?b ---> bool 
//│ ║  
//│ ╟── this `else` branch has type `int` and it flows into `?a`
//│ ║  l.1: 	let h y = (not y, (if true then y else 5))
//│ ║       	                                       ^
//│ ╟── this if-then-else expression has type `?a`
//│ ║  l.1: 	let h y = (not y, (if true then y else 5))
//│ ║       	                  ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this `then` branch has type `?a` and it flows from `?b`
//│ ║  l.1: 	let h y = (not y, (if true then y else 5))
//│ ║       	                                ^
//│ ╟── this variable has type `?b`
//│ ║  l.1: 	let h y = (not y, (if true then y else 5))
//│ ║       	      ^
//│ ╟── this reference has type `?b` and it flows into `bool`
//│ ║  l.1: 	let h y = (not y, (if true then y else 5))
//│ ║       	               ^
//│ ╟── this type reference has type `bool`
//│ ║  builtin: 	let not: bool -> bool
//│ ╙──         	         ^^^^
//│ h: (bool & 'a) -> (bool, int | 'a,)





:e
:unify
let h y = (not y, (if true then y else 5))
//│ ╔══[ERROR] Type `int` does not match `bool`
//│ ║  
//│ ╟──        int ---> ?a <--- ?b ---> bool 
//│ ║  
//│ ╟── this `else` branch has type `int` and it flows into `?a`
//│ ║  l.1: 	let h y = (not y, (if true then y else 5))
//│ ║       	                                       ^
//│ ╟── this if-then-else expression has type `?a`
//│ ║  l.1: 	let h y = (not y, (if true then y else 5))
//│ ║       	                  ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this `then` branch has type `?a` and it flows from `?b`
//│ ║  l.1: 	let h y = (not y, (if true then y else 5))
//│ ║       	                                ^
//│ ╟── this variable has type `?b`
//│ ║  l.1: 	let h y = (not y, (if true then y else 5))
//│ ║       	      ^
//│ ╟── this reference has type `?b` and it flows into `bool`
//│ ║  l.1: 	let h y = (not y, (if true then y else 5))
//│ ║       	               ^
//│ ╟── this type reference has type `bool`
//│ ║  builtin: 	let not: bool -> bool
//│ ╙──         	         ^^^^
//│ h: (bool & 'a) -> (bool, int | 'a,)



:e
:unify
let confluence z = if true then z else 5
confluence true
//│ ╔══[ERROR] Type `int` does not match `bool`
//│ ║  
//│ ╟──        int ---> ?a <--- bool 
//│ ║  
//│ ╟── this `else` branch has type `int` and it flows into `?a`
//│ ║  l.1: 	let confluence z = if true then z else 5
//│ ║       	                                       ^
//│ ╟── this if-then-else expression has type `?a`
//│ ║  l.1: 	let confluence z = if true then z else 5
//│ ║       	                   ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this `then` branch has type `?a`
//│ ║  l.1: 	let confluence z = if true then z else 5
//│ ║       	                                ^
//│ ╟── this variable has type `?a` and it flows from `bool`
//│ ║  l.1: 	let confluence z = if true then z else 5
//│ ║       	               ^
//│ ╟── this reference has type `bool`
//│ ║  l.2: 	confluence true
//│ ╙──     	           ^^^^
//│ confluence: 'a -> (int | 'a)
//│ res: bool | int


let mkpair x y = (x, confluence y)
let conflict x = mkpair (not x) x
//│ ╔══[ERROR] Type `int` does not match `bool`
//│ ║  
//│ ╟──        int ---> ?a <--- ?b ---> ?c <--- ?d ---> bool 
//│ ║  
//│ ╟── this `else` branch has type `int` and it flows into `?a`
//│ ║  l.-24: 	let confluence z = if true then z else 5
//│ ║         	                                       ^
//│ ╟── this if-then-else expression has type `?a`
//│ ║  l.-24: 	let confluence z = if true then z else 5
//│ ║         	                   ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this `then` branch has type `?a` and it flows from `?b`
//│ ║  l.-24: 	let confluence z = if true then z else 5
//│ ║         	                                ^
//│ ╟── this variable has type `?b`
//│ ║  l.-24: 	let confluence z = if true then z else 5
//│ ║         	               ^
//│ ╟── this variable has type `?e` and it flows into `?c`
//│ ║  l.1: 	let mkpair x y = (x, confluence y)
//│ ║       	             ^
//│ ╟── this reference has type `?c`
//│ ║  l.1: 	let mkpair x y = (x, confluence y)
//│ ║       	                                ^
//│ ╟── this reference has type `?c` and it flows from `?d`
//│ ║  l.2: 	let conflict x = mkpair (not x) x
//│ ║       	                                ^
//│ ╟── this variable has type `?d`
//│ ║  l.2: 	let conflict x = mkpair (not x) x
//│ ║       	             ^
//│ ╟── this reference has type `?d` and it flows into `bool`
//│ ║  l.2: 	let conflict x = mkpair (not x) x
//│ ║       	                             ^
//│ ╟── this type reference has type `bool`
//│ ║  builtin: 	let not: bool -> bool
//│ ╙──         	         ^^^^
//│ mkpair: 'a -> 'b -> ('a, int | 'b,)
//│ conflict: (bool & 'a) -> (bool, int | 'a,)




:e
let rec digitsOfInt n =
  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10]
//│ digitsOfInt: int -> list[int]

let rec addNumbs n = match n with | [] -> 0 | h::t -> h + (addNumbs t)
//│ addNumbs: list[int] -> int


:e
:tex
let digits n = digitsOfInt (abs n)
//│ digits: int -> list[int]

:e
let rec additivePersistence n =
  match digits n with
  | [] -> 0
  | h::t -> if (addNumbs (h :: t)) >= 10 then false else true
//│ ╔══[ERROR] Type `bool` does not match `int`
//│ ║  
//│ ╟──        bool ---> ?a <--- int 
//│ ║  
//│ ╟── this `then` branch has type `bool` and it flows into `?a`
//│ ║  l.4: 	  | h::t -> if (addNumbs (h :: t)) >= 10 then false else true
//│ ║       	                                              ^^^^^
//│ ╟── this if-then-else expression has type `?a`
//│ ║  l.4: 	  | h::t -> if (addNumbs (h :: t)) >= 10 then false else true
//│ ║       	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this match expression has type `?b` and it flows from `int`
//│ ║  l.2: 	  match digits n with
//│ ║       	  ^^^^^^^^^^^^^^^^^^^
//│ ║  l.3: 	  | [] -> 0 ...
//│ ║       	^^^^^^^^^^^
//│ ╟── this integer literal has type `int`
//│ ║  l.3: 	  | [] -> 0
//│ ╙──     	          ^
//│ additivePersistence: int -> (bool | int)



