




val parse_version: string -> string
val show_major: string -> string
//│ parse_version: string -> string
//│ show_major: string -> string

let appInfo = ("My Application", 1.5)
//│ appInfo: (string, float,)


let process (name, vers) =
  name ^ show_major (parse_version vers)
//│ process: (string, string,) -> string

:tex
:e
let test = process appInfo
//│ [ERROR] Type `string` does not match `float`
//│ `string` comes from
//│    l.-14:‹   **val** parse_version: _B_string__ -> string›
//│ so this reference has type `string`
//│    l.-4:‹     name ^ show_major (parse_version _B_vers__)›
//│ so this variable has type `string`. However it flows into `float`
//│    l.-5:‹   **let** process (name, _B_vers__) =›
//│ because this float literal has type `float`
//│    l.-9:‹   **let** appInfo = ("My Application", _B_1.5__)›
//│ test: string

// * GOAL for concise error:

// ╔══[ERROR] Type `float` does not match `string`
// ╟── this float literal has type `float` but it flows into `string`
// ║  l.20: 	let appInfo = ("My Application", 1.5)
// ║        	                                 ^^^
// ╟── this variable has type `string`
// ║  l.48: 	let process (name, vers) =
// ║        	                   ^^^^
// ╟── this reference has type `string`
// ║  l.49: 	  name ^ show_major (parse_version vers)
// ║        	                                   ^^^^
// ╟── `string` comes from this type expression
// ║  l.15: 	val parse_version: string -> string
// ╙──      	                   ^^^^^^
// test: string



// * Note: another error:

// * FIXME the flow through the function type is confusing; where do ?a ?b ?c come from?


let process name vers =
  name ^ show_major (parse_version vers)
//│ process: string -> string -> string

:e
let test = process appInfo
//│ [ERROR] Type `string` does not match `string * float`
//│    
//│ `string` comes from
//│    builtin:  let (^): string -> string -> string
//│                       ^^^^^^
//│ so this reference has type `string`
//│    l.-3:    name ^ show_major (parse_version vers)
//│             ^^^^
//│ so this variable has type `string`. However it flows into `string * float`
//│    l.-4:  let process name vers =
//│                       ^^^^
//│ because this reference has type `string * float`
//│    l.1:  let test = process appInfo
//│                             ^^^^^^^
//│ because this tuple literal has type `string * float`
//│    l.-50:  let appInfo = ("My Application", 1.5)
//│                       ^^^^^^^^^^^^^^^^^^^^^^^
//│ test: string -> string


